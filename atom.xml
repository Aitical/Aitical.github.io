<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aitical的个人小站</title>
  
  <subtitle>一直在走,走灰多少太阳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-03T04:49:56.749Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴刚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jupyter服务器搭建</title>
    <link href="http://yoursite.com/2018/09/02/jupyter%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/09/02/jupyter服务器搭建/</id>
    <published>2018-09-02T07:40:04.000Z</published>
    <updated>2018-09-03T04:49:56.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h3><p>这里我们使用jupyter-lab服务,是notebook的升级版吧,我用了一段时间觉得还是很好的,除了部分markdown在网页中渲染有些不太对其他都很好用,还有很多扩展可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyterlab --user</span><br></pre></td></tr></table></figure><p>直接安装 jupyterlab 会安装几个依赖库,ipython3也会安装,如果想用notebook的话,用pip3安装一个notebook即可</p><h3 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h3><p><strong>设置密码</strong></p><p>进入python后执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure><p>会让你确认密码,然后会返回加密的值,复制到配置文件中</p><p><strong>配置文件</strong></p><p>初始化配置文件,在终端执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>会产生<code>~/.jupyter/jupyter_notebook_config.py</code>文件,在文件起始添加如下配置信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.password = <span class="string">u'&lt;your-sha1-hash-value&gt;'</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8888</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'*'</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>第一个就是设置你的密码,也就是上一步返回的密文</li><li>第三个ip项是指定ip,这里我们设置所有ip都可以访问,也可以修改为自己的主机ip</li><li>这几个配置在整个配置文件中都是有的, 为了方便管理和以后的编辑,直接复制到文件开始即可</li></ul><p><strong>修改防火墙</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=8888/tcp --permanent</span><br><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>centos中开放8888端口</p><p><strong>启动服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter-lab &gt; jupyter.log &amp;</span><br></pre></td></tr></table></figure><p>后台挂起并把日志输出到jupyter.log中</p><p><strong>其他的设置</strong></p><ul><li>如果不想用8888端口,可以用ngnix做代理转发</li><li>还可以为jupyter服务添加证书,然后就可以使用https</li></ul><p>有需要的话可以搜索对应的设置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装jupyter&quot;&gt;&lt;a href=&quot;#安装jupyter&quot; class=&quot;headerlink&quot; title=&quot;安装jupyter&quot;&gt;&lt;/a&gt;安装jupyter&lt;/h3&gt;&lt;p&gt;这里我们使用jupyter-lab服务,是notebook的升级版吧,我用了一段时间
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>centos7搭建深度学习环境</title>
    <link href="http://yoursite.com/2018/09/02/centos7%E6%90%AD%E5%BB%BA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/09/02/centos7搭建深度学习环境/</id>
    <published>2018-09-02T06:53:06.000Z</published>
    <updated>2018-09-02T07:43:23.771Z</updated>
    
    <content type="html"><![CDATA[<p>有一块1070ti的卡,之前在Ubuntu上跑了一段时间训练,被刷回Windows打游戏了,开学了要给搞回来了,由于这段时间一直使用centos,所以这次直接用centos,由于我们不直接使用这台机子,所以也没装桌面环境,直接当做sever使用了</p><h3 id="centos7系统"><a href="#centos7系统" class="headerlink" title="centos7系统"></a>centos7系统</h3><p>注意安装系统时请选中开发者工具包一起安装,这样会安装好后面需要的很多依赖,如果忘记选中的话,开机后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y groupinstall development</span><br></pre></td></tr></table></figure><p>上面安装之后要update</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>重点在于内核的更新,因为后面驱动用到<code>kernel-devel</code>的依赖,手动安装的开发者包里面的devel现在是比系统的内核小版本更新的,所以不update的话会在驱动安装时返回kernel版本号错误</p><p>可以用下面的语句查看当前内核版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h3 id="下载显卡驱动"><a href="#下载显卡驱动" class="headerlink" title="下载显卡驱动"></a>下载显卡驱动</h3><p>推荐去NVIDIA官网下载驱动程序,选择显卡号与系统后会有驱动列表,然后下载<strong>请下载稳定版驱动</strong>第一个Beta版不要用,我第一次就直接装了396,然后,然后后面就没有了.</p><p><img src="/2018/09/02/centos7搭建深度学习环境/选择驱动.png" alt="驱动选择"></p><p><strong>注意</strong>:驱动的选择大致是这样</p><ul><li>Pytorch支持最新的CUDA9.2,所以你可以用396,也就是最新的驱动,这些都没问题</li><li>如果<strong>你用Tensorflow的话</strong>,正式发行的版本(现在是1.10)只支持CUDA9.0, 9.2的话会报错,提示缺少一些模块,其实是版本号变了,我没有尝试修改文件的版本号来让他适配,官方说可以自行编译,不过我第二次还是老老实实装了CUDA9.0</li><li>如果用CUDA9.0的话就是驱动384即可,所以下载驱动时可以下几个月前的384,我这里就下了384</li></ul><p>另外,如果用CUDA的run安装包的话,会自动安装显卡驱动,不过我试了几次,都没装成功,所以这里还是推荐大家自己下载驱动安装</p><p><img src="/2018/09/02/centos7搭建深度学习环境/384.png" alt="384"></p><p>下载384的驱动后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh NVIDIA_***.run</span><br></pre></td></tr></table></figure><p>指定驱动安装即可,这时候会提示一些问题,这一次是说原来的nouveau驱动也就是独显的自带驱动影响安装,我们让他<strong>自动创建文件禁止并停用</strong>即可然后提示Failed就结束了这次的安装</p><p>接着<strong>重启计算机</strong>,注意这次重启<strong>要默认用集显/核显开机</strong>,因为独显驱动禁止了,N卡现在没法用,必须用集显/核显开机才能继续安装,如果还是走N卡的话,到BIOS里面buid_in_device选择开机的显卡</p><p>开机之后到驱动run文件那,执行即可完成安装,然后在命令行可以检查状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="/2018/09/02/centos7搭建深度学习环境/smi.png" alt="nvidia-smi"></p><p>返回当前N卡的状态和型号,也就说明驱动安装成功</p><h3 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h3><p>依然是去NVIDIA官网下载CUDA啊,这里还是要注意CUDA的版本问题,在上面驱动的选择上已经说了,Tensorflow正式版只支持9.0,但官网上默认是9.2的下载,不要下载错了</p><p><img src="/2018/09/02/centos7搭建深度学习环境/cuda9.2.png" alt="cuda9.2"></p><p>进入右侧legacy download</p><p><img src="/2018/09/02/centos7搭建深度学习环境/cuda9.0.png" alt="cuda9.0"></p><p>下载9.0版本的,选择对应的环境,下载runfile</p><p><img src="/2018/09/02/centos7搭建深度学习环境/cuda_runfile.png" alt="下载对应版本"></p><p>然后按照官网的提示,执行安装就行了,在安装cuda时,第一个显卡驱动选n,因为我们已经装过了,反复安装的话会有问题吧,我第一次安装时就又安装一遍,结果…没然后了</p><p>安装完成后添加环境变量,在/etc/profile最后添加下面两句就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">export PATH=/usr/local/cuda/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后加载环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="安装CUDNN"><a href="#安装CUDNN" class="headerlink" title="安装CUDNN"></a>安装CUDNN</h3><p>还是去官网下载,这里要登录一下,我看到可以qq登录了,不过我这面竟然要翻墙???,反正进去了,下载对应cuda9.0的cudnn就行,然后下载,按照官网提示的解压并放到对应位置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf cudnn-*.tgz</span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h</span><br><span class="line">sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure><p>到这就设置好环境了,之前也都编译好python3了,再装一下tensorflow-gpu和keras就可以用了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一块1070ti的卡,之前在Ubuntu上跑了一段时间训练,被刷回Windows打游戏了,开学了要给搞回来了,由于这段时间一直使用centos,所以这次直接用centos,由于我们不直接使用这台机子,所以也没装桌面环境,直接当做sever使用了&lt;/p&gt;
&lt;h3 id=&quot;c
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>python3缺失_bz2模块解决方案</title>
    <link href="http://yoursite.com/2018/08/27/python3%E7%BC%BA%E5%A4%B1-bz2%E6%A8%A1%E5%9D%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/08/27/python3缺失-bz2模块解决方案/</id>
    <published>2018-08-27T02:17:33.000Z</published>
    <updated>2018-08-27T03:20:35.853Z</updated>
    
    <content type="html"><![CDATA[<p>这几天看到一个python的分布式计算库Dask,了解了一下,觉得蛮有意思的就想试试,在部署启动时报错</p><p><img src="/2018/08/27/python3缺失-bz2模块解决方案/find_error.png" alt="find_error"></p><p>接着就开始google和看别人的博客,最终把问题解决了,不过这里参考了几个不同的回答才最终解决在这里整理下最终的解决方案</p><p>环境说明:</p><ul><li>Centos7</li><li>Python3.6.6</li></ul><p>看了一些教程和问题,可以定位到这个问题是python3.6缺少了一个_bz2.cpython-36m-x86_64-linux-gnu.so的组件</p><p>StackOverFlow和部分博主推荐在自己编译安装bz2然后重新编译python3.6即可,过程大致如下</p><ol><li>yum install  bzip2-devel</li><li>wget <a href="http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz" target="_blank" rel="noopener">http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz</a></li><li>tar -zxvf bzip2-1.0.6.tar.gz</li><li>cd bzip2-1.0.6</li><li>make &amp;&amp; make install</li><li>configure and re compile python</li></ol><p>不过我不想重新搞一遍,所以采用下面的方法:</p><p>目标: 把这个组件放到对应python路径下的<code>lib/python3.6/lib-dynload/</code>中即可</p><p>于是我下载了so文件,放进去后执行,又有了另外一个问题</p><p><img src="/2018/08/27/python3缺失-bz2模块解决方案/another_error.png" alt="another_error"></p><p>添加个链接就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /lib64/libbz2.so.1 /usr/lib64/libbz2.so.1.0</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c "import bz2; print(bz2.__doc__)"</span><br></pre></td></tr></table></figure><p><img src="/2018/08/27/python3缺失-bz2模块解决方案/res.png" alt="result"></p><p>到这问题就已经解决了</p><p>整个操作的过程很简单,由于要在集群的环境中更改一遍,我把过程整理在sh脚本中,脚本和so文件都在[github][<a href="https://github.com/Aitical/fix_import__bz2_error]上,注意设置脚本中的用户密码和python路径就可以一键修复这个问题了" target="_blank" rel="noopener">https://github.com/Aitical/fix_import__bz2_error]上,注意设置脚本中的用户密码和python路径就可以一键修复这个问题了</a></p><p>参考链接:</p><p><a href="https://blog.csdn.net/heros_never_die/article/details/79942124" target="_blank" rel="noopener">https://blog.csdn.net/heros_never_die/article/details/79942124</a></p><p><a href="https://www.cnblogs.com/emanlee/p/7325171.html" target="_blank" rel="noopener">https://www.cnblogs.com/emanlee/p/7325171.html</a></p><p><a href="https://stackoverflow.com/questions/12806122/missing-python-bz2-module" target="_blank" rel="noopener">https://stackoverflow.com/questions/12806122/missing-python-bz2-module</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天看到一个python的分布式计算库Dask,了解了一下,觉得蛮有意思的就想试试,在部署启动时报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/08/27/python3缺失-bz2模块解决方案/find_error.png&quot; alt=&quot;find_error&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="centos7" scheme="http://yoursite.com/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Django开发Restful API记录(二)</title>
    <link href="http://yoursite.com/2018/08/22/Django%E5%BC%80%E5%8F%91Restful-API%E8%AE%B0%E5%BD%95-%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/08/22/Django开发Restful-API记录-二/</id>
    <published>2018-08-22T04:43:23.000Z</published>
    <updated>2018-08-22T04:46:13.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="请求对象-Request-Objects"><a href="#请求对象-Request-Objects" class="headerlink" title="请求对象(Request Objects)"></a>请求对象(Request Objects)</h3><p>DRF包含一个拓展了<code>HttpRequest</code>的<code>Request</code>对象,并且更加边界的请求解析.<code>Request</code>的核心功能就是<code>request.data</code>,这和<code>request.POST</code>很像但对于开发API来说更加有用.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST  <span class="comment"># 仅仅是处理data的数据 仅仅对POST方法使用</span></span><br><span class="line">request.data <span class="comment"># 处理任意数据 对POST/PUT/PATCH方法都可以</span></span><br></pre></td></tr></table></figure><h3 id="响应对象-Response-Objects"><a href="#响应对象-Response-Objects" class="headerlink" title="响应对象(Response Objects)"></a>响应对象(Response Objects)</h3><p>DRF包含一个<code>Response</code>对象,是<code>TemplateResponse</code>的一种.并且使用未渲染的内容和内容协商来判断以正确的形式返回给客户端.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Response(data)<span class="comment">#按照客户端的请求渲染内容</span></span><br></pre></td></tr></table></figure><h3 id="状态码-Status-Code"><a href="#状态码-Status-Code" class="headerlink" title="状态码(Status Code)"></a>状态码(Status Code)</h3><p>在你的视图中使用数字化的HTTP状态码也并不总是便于阅读,并且如果状态码发生错误不容你引起你的注意.DRF提供了一种更加清晰的状态码的定义方式,比如在<code>status</code>模块中的<code>HTTP_400_REQUEST</code>.用这样的标记要比仅仅是数字的状态码更好一些.</p><h3 id="装饰API视图-Wrapping-API-Views"><a href="#装饰API视图-Wrapping-API-Views" class="headerlink" title="装饰API视图(Wrapping API Views)"></a>装饰API视图(Wrapping API Views)</h3><p>DRF提供了两个装饰器用来书写API views</p><ol><li><code>@api_view</code>装饰器用于基于函数视图</li><li><code>APIView</code>类用于基于类视图<br>装饰器也提供了许多功能,比如保证你视图中获取<code>Request</code>的参数并且在<code>Response</code>中添加用于显示的内容.<br>装饰器同时也提供了一些动作,比如在合适的时候返回<code>405 Method Not Allowed</code>响应或者在获取异常的<code>Request.data</code>时处理<code>ParseError</code>.</li></ol><h3 id="综合起来"><a href="#综合起来" class="headerlink" title="综合起来"></a>综合起来</h3><p>那么现在我们就用这些新的内容来写一些视图.<br>这时,在<code>views.py</code>中就不在需要<code>JSONResponse</code>了,可以简洁的重构一下视图代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    显示所有的代码段</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>和之前的视图实例相比代码更加简洁了,并且代码更像FORM API了,我们也是用了命名了的状态码,让其含义更加清晰.<br>视图中剩下部分的重构代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>注意我们不再尝试者在请求或者响应中指出内容的类型.<code>request.data</code>可以处理输入的<code>json</code>并且他也能处理其他形式.类似的,我们返回响应数据对象时让DRF帮我们渲染成正确的格式</p><h3 id="添加可选格式的后缀到URLs-Adding-optional-format-suffixes-to-our-URLs"><a href="#添加可选格式的后缀到URLs-Adding-optional-format-suffixes-to-our-URLs" class="headerlink" title="添加可选格式的后缀到URLs(Adding optional format suffixes to our URLs)"></a>添加可选格式的后缀到URLs(Adding optional format suffixes to our URLs)</h3><p>在API结尾添加数据类型.使用格式化的后缀,让url更清晰返回类型<br>在<code>snippet/views.py</code>中,在视图函数中添加<code>format</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request, format=None)</span>:</span></span><br></pre></td></tr></table></figure><p>这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk, format=None)</span>:</span></span><br></pre></td></tr></table></figure><p>现在我们更新下<code>snippets/urls.py</code>文件,添加一下<code>format_suffix_patterns</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">r'snippets'</span>, views.snippet_list),</span><br><span class="line">    path(<span class="string">r'snippets/&lt;int:pk&gt;'</span>, views.snippet_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>可以通过请求头的<code>Accept</code>来控制返回数据类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets Accept:application/json  # Request JSON</span><br><span class="line">http http://127.0.0.1:8000/snippets Accept:text/html         # Request HTML</span><br></pre></td></tr></table></figure><p>也可以通过添加后缀</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets.json  # JSON suffix</span><br><span class="line">http http://127.0.0.1:8000/snippets.api   # Browsable API suffix</span><br></pre></td></tr></table></figure><p>同样的也可以通过<code>Content-Type</code>来控制格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http --form POST http://127.0.0.1:8000/snippets code="print 123"</span><br></pre></td></tr></table></figure><p>可以把API的视图写成以类而不是以函数为基础的视图</p><h3 id="重写成类视图-class-based-views"><a href="#重写成类视图-class-based-views" class="headerlink" title="重写成类视图(class-based views)"></a>重写成类视图(class-based views)</h3><p>我们想改写成类视图,其实只要对<code>views.py</code>做一些简单的改动就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>目前为止都还很好,看起来很像之前的代码,并且我们对不同的请求方式有了更明确的区分.我们还需要接着更新<code>views.py</code>的实例内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, pk)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Snippet.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>到这看起来跟我们之前的代码还是很像的.<br>我们还需要稍微改一下<code>snippets/urls.py</code>来使用类视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">r'snippets'</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">r'snippets/&lt;int:pk&gt;'</span>, views.SnippetDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>注意url匹配中<code>as_view()</code>的使用,django的URL解析器需要将request和相应的参数传递给一个可调用的函数,而不是一个类.所以class-based view提供一个类方法:as_view()来解决这个问题,as_view()方法让你可以把类当做函数来调用.</p><h3 id="混合类-Using-mixins"><a href="#混合类-Using-mixins" class="headerlink" title="混合类(Using mixins)"></a>混合类(Using mixins)</h3><p>使用类视图的一大成功就是可以轻松的实现操作的复用.<br>那些我们一直使用的创建/获取/更新/删除操作对任何基于模型的API视图都是类似的.那么这些常用的方法就在DRF的混合类中实现了.<br>使用混合类重构<code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>首先继承<code>GenericAPIView</code>建立view,然后添加了<code>ListModelMixin</code>和<code>CreateModelMixin</code>.<br>基类提供了关键的功能,混合类提供了<code>.list()</code>和<code>.create()</code>操作.然后我们把<code>get</code>和<code>post</code>绑定在适合的操作上.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                    generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>使用<code>GenericAPIView</code>作为基类提供关键功能,并且添加了<code>.retrieve()</code>,<code>.update()</code>,<code>.destroy()</code>的操作.</p><h3 id="通用类视图"><a href="#通用类视图" class="headerlink" title="通用类视图"></a>通用类视图</h3><p>使用混合类视图让我们比之前少写了很多代码,但我们还可以更进一步.DRF提供了一套混合式的通用类这样我们就可以更加简化<code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;请求对象-Request-Objects&quot;&gt;&lt;a href=&quot;#请求对象-Request-Objects&quot; class=&quot;headerlink&quot; title=&quot;请求对象(Request Objects)&quot;&gt;&lt;/a&gt;请求对象(Request Objects)&lt;/h3
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="api开发" scheme="http://yoursite.com/tags/api%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Django开发Restful API记录(一)</title>
    <link href="http://yoursite.com/2018/08/21/Django%E5%BC%80%E5%8F%91Restful-API%E8%AE%B0%E5%BD%95-%E4%B8%80/"/>
    <id>http://yoursite.com/2018/08/21/Django开发Restful-API记录-一/</id>
    <published>2018-08-21T13:42:36.000Z</published>
    <updated>2018-08-21T13:46:33.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><p>这里记录了我用Django开发api时,学习的Django Rest_Framework框架的一些内容,绝大多数都是官网上的7步教程,我进行了对应的完善,使其支持Django2.0+</p><p>运行环境:</p><ul><li>Python 3.5+</li><li>Django 2.0+</li></ul><h3 id="创建环境-可选"><a href="#创建环境-可选" class="headerlink" title="创建环境(可选):"></a>创建环境(可选):</h3><p>使用<code>virtualenv</code>创建一个虚拟环境.这样让我们用到的环境配置与你的其他的项目配置相互独立</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv env</span><br><span class="line">source env/bin/activate</span><br></pre></td></tr></table></figure><p>现在就创建好虚拟环境了,安装必要的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br><span class="line">pip3 install djangorestframework</span><br><span class="line">pip3 install pygments  # 我们用这个来实现代码高亮</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建并进入项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject tutorial</span><br><span class="line">cd tutorial</span><br></pre></td></tr></table></figure><p>创建一个应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py snippets</span><br></pre></td></tr></table></figure><p>把<code>snippets</code>和<code>rest_framework</code>添加到<code>INSTALLED_APPS</code>中,编辑<code>tutorial/settings.py</code>文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="comment">#加入下面两句内容</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'snippets'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h3><p>创建一个<code>Snippet</code>的model(模型)用来存储代码段.编辑<code>snippets/models.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span>  item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = sorted([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = sorted((item,item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snippets</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="keyword">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">'python'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">'friendly'</span>, max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">'created'</span>,)</span><br></pre></td></tr></table></figure><p>数据库迁移</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations snippets</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h3 id="创建序列化类"><a href="#创建序列化类" class="headerlink" title="创建序列化类"></a>创建序列化类</h3><p>首先要序列化和反序列化我们的snippet实例成可交互的形式,例如<code>json</code>.先在<code>snippets</code>下创建<code>serializers.py</code>文件然后写入如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippets, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    id = serializers.IntegerField (read_only=<span class="keyword">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="keyword">False</span>, allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="keyword">False</span>)</span><br><span class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">'python'</span>)</span><br><span class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">'friendly'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        接收数据后创建并返回一个新snippet实例</span></span><br><span class="line"><span class="string">        :param validated_data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        接收数据后更新并返回该snippet实例</span></span><br><span class="line"><span class="string">        :param instance:</span></span><br><span class="line"><span class="string">        :param validated_data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">'title'</span>, instance.title)</span><br><span class="line">        instance.code = validated_data.get(<span class="string">'code'</span>, instance.code)</span><br><span class="line">        instance.lineos = validated_data.get(<span class="string">'linenos'</span>, instance.lineos)</span><br><span class="line">        instance.language = validated_data.get(<span class="string">'language'</span>, instance.language)</span><br><span class="line">        instance.style = validated_data.get(<span class="string">'style'</span>, instance.style)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>序列化的第一部分是定义了哪些地方要被序列化和反序列化.<code>create()</code>和<code>update()</code>方法展示了调用<code>serializer.save()</code>实例是如何创建和更改的完整过程.<br>序列化类很想Django的<code>Form</code>类型,在不同的地方也包含了相似验证标签,像<code>required</code>,<code>max_length</code>和<code>default</code>.<br>字段标签也可以控制序列在具体环境照片那个的展示,比如当渲染成HTML时.<code>{&#39;base_template&#39;: &#39;textarea.html&#39;}</code>标签就相当于DJango的<code>Form</code>中<code>widget=widgets.Textarea</code>.这个对于控制API如何显示十分有用</p><h3 id="序列化进行工作"><a href="#序列化进行工作" class="headerlink" title="序列化进行工作"></a>序列化进行工作</h3><p>在上手之前,我们先熟悉一下序列化如何操作的,进入Django shell:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><p>首先把需要的库import, 然后创建几个Snippets用来后面的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">'foo = "bar"\n'</span>)</span><br><span class="line">snippet.save()</span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">'print("hello, world")\n'</span>)</span><br><span class="line">snippet.save()</span><br></pre></td></tr></table></figure><p>这样我们就有了几个用来处理的实例了,让我们看一下序列化一个具体实例是什么效果.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">serializer = SnippetSerializer(snippet)</span><br><span class="line">serializer.data</span><br><span class="line"><span class="comment"># &#123;'id': 2, 'title': u'', 'code': u'print "hello, world"\n', 'linenos': False, 'language': u'python', 'style': u'friendly'&#125;</span></span><br></pre></td></tr></table></figure><p>这时,我们把一个模型实例转化成了原生的Python数据类型.为了完成序列化过程我们把数据渲染成<code>json</code>格式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">content = JSONRenderer().render(serializer.data)</span><br><span class="line">content</span><br><span class="line"><span class="comment"># '&#123;"id": 2, "title": "", "code": "print \\"hello, world\\"\\n", "linenos": false, "language": "python", "style": "friendly"&#125;'</span></span><br></pre></td></tr></table></figure><p>反序列化也是相似的操作.首先我们把数据流转化成Python数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.six <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">stream = BytesIO(content)</span><br><span class="line">data = JSONParser().parse(stream)</span><br></pre></td></tr></table></figure><p>然后我们重新把原始数据存储成一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">serializer = SnippetSerializer(data=data)</span><br><span class="line">serializer.is_valid()</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">serializer.validated_data</span><br><span class="line"><span class="comment"># OrderedDict([('title', ''), ('code', 'print "hello, world"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])</span></span><br><span class="line">serializer.save()</span><br><span class="line"><span class="comment"># &lt;Snippet: Snippet object(3)&gt;</span></span><br></pre></td></tr></table></figure><p>我们同样也可以对查询操作而不是一个模型实例进行序列化.为了这样做要加入<code>many=True</code>标签作为序列化的参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">serializer = SnippetSerializer(Snippet.objects.all(), many=<span class="keyword">True</span>)</span><br><span class="line">serializer.data</span><br><span class="line"><span class="comment"># [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = "bar"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print "hello, world"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print "hello, world"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]</span></span><br></pre></td></tr></table></figure><h3 id="使用模型序列化"><a href="#使用模型序列化" class="headerlink" title="使用模型序列化"></a>使用模型序列化</h3><p><code>SnippetSerializer</code>复制了很多在<code>Snippet</code>模型中的信息.如果可以让代码更简洁将会非常棒.<br>这也和Django中的<code>Form</code>与<code>ModelForm</code>类似,DRF也包含着<code>Serializer</code>和<code>ModelSerializer</code>.<br>让我们把seralizer用<code>ModelSerializer</code>重构一边.编辑<code>snippets/serializers.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</span><br></pre></td></tr></table></figure><p>序列化的一个非常方便的属性就是你可以通过print他的显示来检查实例中的内容.<br>在<code>shell</code>中操作一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line">serializer = SnippetSerializer()</span><br><span class="line">print(repr(serializer))</span><br><span class="line"><span class="comment"># SnippetSerializer():</span></span><br><span class="line"><span class="comment">#    id = IntegerField(label='ID', read_only=True)</span></span><br><span class="line"><span class="comment">#    title = CharField(allow_blank=True, max_length=100, required=False)</span></span><br><span class="line"><span class="comment">#    code = CharField(style=&#123;'base_template': 'textarea.html'&#125;)</span></span><br><span class="line"><span class="comment">#    linenos = BooleanField(required=False)</span></span><br><span class="line"><span class="comment">#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...</span></span><br><span class="line"><span class="comment">#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...</span></span><br></pre></td></tr></table></figure><p>重要的一点是<code>ModelSerializer</code>并不是神奇的做了什么事情,只是一种简洁创建serializer的方式:</p><ol><li>自动配置了字段的设置</li><li>简单的默认了<code>create()</code>和<code>update()</code>方法</li></ol><h3 id="使用序列化编写视图"><a href="#使用序列化编写视图" class="headerlink" title="使用序列化编写视图"></a>使用序列化编写视图</h3><p>编辑<code>snippets/views.py</code>文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br></pre></td></tr></table></figure><p>API的根路由是列出所有存在的代码段或者创建新的代码段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>注意一下,我们想直接从客户端POST数据到view中处理,但是客户端没有CSRF,所以这里用了<code>csrf_exempt</code>.通常不用这么做,DRF的视图用了比这种要更好的操作,但现在这先实现我们的目标.</p><p>另外也需要单独对某一条代码段进行操作,比如取出/更新/删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure><p>创建与view中操作对应的路由, 创建<code>snippets/urls.py</code>文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">r'snippets'</span>, views.snippet_list),</span><br><span class="line">    path(<span class="string">r'snippets/&lt;int:pk&gt;'</span>, views.snippet_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接着编辑项目文件<code>tutorial/urls.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">r''</span>, include(<span class="string">'snippets.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>值得注意的是有几个边缘情况这里没有处理,例如<code>json</code>异常或者是有一些我们view中没有的请求,我们要返回500”server error”但这里还没做.</p><h3 id="测试api请求"><a href="#测试api请求" class="headerlink" title="测试api请求"></a>测试api请求</h3><p>启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><p>用<code>httpie</code>测试API</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install httpie</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets</span><br></pre></td></tr></table></figure><p>最后就能得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 352</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 12 Jan 2018 06:43:27 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.5.2</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"foo = \"bar\n\""</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"language"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="attr">"linenos"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"style"</span>: <span class="string">"friendly"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"print \"hello world\n\""</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"language"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="attr">"linenos"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"style"</span>: <span class="string">"friendly"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"print \"hello world\n\""</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"language"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="attr">"linenos"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"style"</span>: <span class="string">"friendly"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>测试另一个接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>http http://127.0.0.1:8000/snippets/2</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 118</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 12 Jan 2018 06:45:39 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.5.2</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "code": "print \"hello world\n\"",</span><br><span class="line">    "id": 2,</span><br><span class="line">    "language": "python",</span><br><span class="line">    "linenos": false,</span><br><span class="line">    "style": "friendly",</span><br><span class="line">    "title": ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明:&quot;&gt;&lt;/a&gt;说明:&lt;/h3&gt;&lt;p&gt;这里记录了我用Django开发api时,学习的Django Rest_Framework框架的一些内容,绝大多数都是官网上的7步教程,我
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="api开发" scheme="http://yoursite.com/tags/api%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AdaBoost算法原理</title>
    <link href="http://yoursite.com/2018/07/18/AdaBoost%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/18/AdaBoost算法原理/</id>
    <published>2018-07-18T04:41:48.000Z</published>
    <updated>2018-07-19T15:41:09.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AdaBoost简述"><a href="#AdaBoost简述" class="headerlink" title="AdaBoost简述"></a>AdaBoost简述</h3><blockquote><p>AdaBoost，是英文”Adaptive Boosting”（自适应增强）的缩写，由Yoav Freund和Robert Schapire在1995年提出。它的自适应在于：前一个基本分类器分错的样本会得到加强，加权后的全体样本再次被用来训练下一个基本分类器。同时，在每一轮中加入一个新的弱分类器，直到达到某个预定的足够小的错误率或达到预先指定的最大迭代次数。</p></blockquote><p>AdaBoost在每一轮训练过程中提高被前一轮弱分类器错误分类的弱分类器权值,降低正确分类的样本权值,使得没有被正确分类的数据由于权值大而被后一轮的弱分类器更加关注.最后采用加权多数表决法,加大误差率晓得弱分类器的权值,使其在表决中有较大作用,减少分类误差率大的弱分类器权值,使其在表决中有较小作用.</p><h3 id="AdaBoost算法"><a href="#AdaBoost算法" class="headerlink" title="AdaBoost算法"></a>AdaBoost算法</h3><p>训练数据集<br>$$<br>T=\lbrace (x{1}, y{1}), (x{2}, y{2}),\dots, (x{N}, y{N}) \rbrace<br>$$<br>其中样本点由实例与标记组成,实例$x_{i}\in\chi\subseteq R^{n}, y_{i}\in Y={-1, +1}$</p><p><strong>算法</strong>:</p><p>初始化训练数据的权值分布:<br>$$<br>D_{1} = (\omega_{11}, \dots,\omega_{1,i},\dots,\omega_{1N}), \space \omega_{1i}=\frac{1}{N}, \space i=1,2,\dots, N<br>$$<br>对于第$m = 1,2,\dots,M$次,用权值分布为$D_{m}$的数据训练弱分类器$G_{m}$, 计算$G_{m}$在训练集上的误分类率:<br>$$<br>e_{m}= \sum_{i=1}^{N}P(G_{m}(x_{i})\ne y_{i})=\sum_{i=1}^{N}\omega_{mi}I(G_{m}(x_{i})\ne y_{i})<br>$$<br>计算$G_{m}$的系数<br>$$<br>\alpha_{m} = \frac{1}{2}log\frac{1-e_{m}}{e_{m}}<br>$$<br>更新训练集的权值分布<br>$$<br>D_{m+1} = (\omega_{m+11}, \dots,\omega_{m+1,i},\dots,\omega_{m+1N})<br>$$</p><p>$$<br>\omega_{m+1, i}=\frac{\omega_{mi}}{Z_{m}}e^{-\alpha_{m}y_{i}G_{m}(x_{i})}<br>$$</p><p>其中$Z_{m}$是规范化因子<br>$$<br>Z_{m}=\sum_{i=1}^{N}\omega_{mi}e^{-\alpha_{m}y_{i}G_{m}(x_{i})}<br>$$<br>构建基本分类器线性组合<br>$$<br>f(x) = \sum_{m=1}^{M}\alpha_{m}G_{m}(x)<br>$$<br>得到最终分类器<br>$$<br>G(x)=sign(f(x))=sign(\sum_{m=1}^{M}\alpha_{m}G_{m}(x))<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AdaBoost简述&quot;&gt;&lt;a href=&quot;#AdaBoost简述&quot; class=&quot;headerlink&quot; title=&quot;AdaBoost简述&quot;&gt;&lt;/a&gt;AdaBoost简述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;AdaBoost，是英文”Adaptive Boo
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="adaboost" scheme="http://yoursite.com/tags/adaboost/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统初始化配置</title>
    <link href="http://yoursite.com/2018/07/14/Ubuntu%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/07/14/Ubuntu系统初始化配置/</id>
    <published>2018-07-14T06:28:29.000Z</published>
    <updated>2018-07-14T06:29:01.352Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu初始环境配置"><a href="#Ubuntu初始环境配置" class="headerlink" title="Ubuntu初始环境配置"></a>Ubuntu初始环境配置</h3><h4 id="基本软件安装"><a href="#基本软件安装" class="headerlink" title="基本软件安装"></a>基本软件安装</h4><h5 id="常用工具和各种包管理器"><a href="#常用工具和各种包管理器" class="headerlink" title="常用工具和各种包管理器"></a>常用工具和各种包管理器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>git wget curl npm composer pip pip3</span><br><span class="line">sudo apt install git curl wget </span><br><span class="line">sudo apt install npm </span><br><span class="line">sudo npm install -g n</span><br><span class="line">sudo apt install composer </span><br><span class="line">sudo apt install python-pip python3-pip</span><br></pre></td></tr></table></figure><h5 id="几个国内镜像源更改"><a href="#几个国内镜像源更改" class="headerlink" title="几个国内镜像源更改"></a>几个国内镜像源更改</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>修改npm为淘宝镜像</span><br><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br><span class="line"><span class="meta">#</span> 修改pip源</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"><span class="meta">#</span> 写入以下内容</span><br><span class="line"> [global]</span><br><span class="line"> trusted-host =  mirrors.aliyun.com</span><br><span class="line"> index-url = http://mirrors.aliyun.com/pypi/simple</span><br><span class="line"><span class="meta">#</span> 修改composer源</span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><h4 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>有很多vim的配置,可以自己去找一找</span><br><span class="line">git clone https://github.com/chxuan/vimplus</span><br><span class="line"><span class="meta">&gt;</span>- cd vimplus==~~==</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h4 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>安装nodejs版本管理n</span><br><span class="line">sudo npm install -g n</span><br><span class="line"><span class="meta">#</span>安装稳定版-&gt;推荐这一个</span><br><span class="line">n stable</span><br><span class="line"><span class="meta">#</span>安装最新的nodejs</span><br><span class="line">n latest</span><br></pre></td></tr></table></figure><h4 id="github的ssh配置"><a href="#github的ssh配置" class="headerlink" title="github的ssh配置"></a>github的ssh配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "your name"</span><br><span class="line">git config --global user.email "your email"</span><br><span class="line"><span class="meta">#</span>填写你的github账号信息</span><br><span class="line">git config --lis</span><br><span class="line"><span class="meta">#</span>查看是否配置成功</span><br><span class="line">cd ~/.ssh</span><br><span class="line"><span class="meta">#</span>如果有东西则删除</span><br><span class="line">ssh-keygen -t rsa -C "your email" #就是上面那个email</span><br><span class="line"><span class="meta">#</span>全部回车到结束</span><br><span class="line">cd .ssh</span><br><span class="line">ll</span><br><span class="line"><span class="meta">#</span>看到几个文件</span><br><span class="line">cat  id_rsa.pub</span><br><span class="line"><span class="meta">#</span>复制显示的内容</span><br><span class="line"><span class="meta">#</span>到你的github上去,进入setting,左侧ssh配置,new一个,把刚刚那个粘贴进去</span><br><span class="line"><span class="meta">#</span>之后git就不要用http方式了</span><br></pre></td></tr></table></figure><h4 id="laravel环境配置"><a href="#laravel环境配置" class="headerlink" title="laravel环境配置"></a>laravel环境配置</h4><p><strong>本地服务配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>打开软件更新器切换一下国内的源,清华或者阿里</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br><span class="line">sudo apt install mysql-server mysql-client</span><br><span class="line">sudo apt install php7.0 php7.0-.</span><br><span class="line"><span class="meta">#</span>我在使用过程中发现总是会提示我php少了一些拓展,这里就直接把所有的装上</span><br></pre></td></tr></table></figure><p><strong>composer安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install composer</span><br><span class="line">composer</span><br><span class="line"><span class="meta">#</span>看到composer提示信息则表示安装成功</span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br><span class="line"><span class="meta">#</span>切换到国内的源</span><br></pre></td></tr></table></figure><p><strong>laravel安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">composer global require "laravel/installer"</span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="meta">#</span>在最后添加下面一句话</span><br><span class="line">export PATH="$PATH:$HOME/.config/composer/vendor/bin</span><br><span class="line"><span class="meta">#</span>注销后重新登录</span><br><span class="line">echo $PATH</span><br><span class="line"><span class="meta">#</span>看到最后一句就是刚刚添加的内容则添加成功</span><br></pre></td></tr></table></figure><h4 id="Django环境配置"><a href="#Django环境配置" class="headerlink" title="Django环境配置"></a>Django环境配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>注意Django只能在sudo用户中安装,root用户会提示错误信息,</span><br><span class="line"><span class="meta">#</span>请先切换到sudo用户,服务器端请参考开始配置sudo用户</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>切换好后</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line">sudo pip3 install django</span><br><span class="line"><span class="meta">#</span>django操作数据库会用到mysqlclient的Python包,安装过程中会提示缺少环境</span><br><span class="line"></span><br><span class="line">sudo apt install libmysqlclient-dev</span><br><span class="line">sudo pip3 install mysqlclient</span><br></pre></td></tr></table></figure><h4 id="服务器端创建sudo用户"><a href="#服务器端创建sudo用户" class="headerlink" title="服务器端创建sudo用户"></a>服务器端创建sudo用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建sudo并切换至sudo用户</span><br><span class="line"><span class="meta">#</span>以root身份登录之后</span><br><span class="line">adduser sudoUserName</span><br><span class="line"><span class="meta">#</span>接着设置密码</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line"><span class="meta">#</span>接着用户信息,可以不用填写,回车就行</span><br><span class="line">Changing the user information for username</span><br><span class="line">Enter the new value, or press ENTER for the default</span><br><span class="line">    Full Name []:</span><br><span class="line">    Room Number []:</span><br><span class="line">    Work Phone []:</span><br><span class="line">    Home Phone []:</span><br><span class="line">    Other []:</span><br><span class="line">Is the information correct? [Y/n]</span><br><span class="line"><span class="meta">#</span>赋予用户sudo权限</span><br><span class="line">usermod -aG sudo  sudoUserName</span><br><span class="line"><span class="meta">#</span>切换至sudo用户</span><br><span class="line">su - sudoUserName</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ubuntu初始环境配置&quot;&gt;&lt;a href=&quot;#Ubuntu初始环境配置&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu初始环境配置&quot;&gt;&lt;/a&gt;Ubuntu初始环境配置&lt;/h3&gt;&lt;h4 id=&quot;基本软件安装&quot;&gt;&lt;a href=&quot;#基本软件安装&quot;
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>感知机(PLA)</title>
    <link href="http://yoursite.com/2018/07/13/%E6%84%9F%E7%9F%A5%E6%9C%BA-PLA/"/>
    <id>http://yoursite.com/2018/07/13/感知机-PLA/</id>
    <published>2018-07-13T15:48:50.000Z</published>
    <updated>2018-07-14T06:17:22.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="感知机算法-PLA"><a href="#感知机算法-PLA" class="headerlink" title="感知机算法(PLA)"></a>感知机算法(PLA)</h3><p>感知机(perceptron)是二分类的线性分类模型,输入为实例的特征向量,输出为实例的类别,取+1和-1二值.感知机对应输入空间中将实例划分为正负两类的超平面,输入判别模型.</p><p>感知机学习旨在求出将训练数据进行先行划分的分离超平面,为此导入基于误分类的损失函数,利用梯度下降法对损失函数进行极小化,求得感知机模型.</p><h3 id="感知机模型"><a href="#感知机模型" class="headerlink" title="感知机模型"></a>感知机模型</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义: 假设输入空间是$\chi \subseteq R^{n}$,输出空间$Y={+1, -1}$.输入$x\in\chi$表示实例的特征向量,对应于输入空间的点;输出$y\in Y$表示实例的类别.由输入空间到输出空间的如下函数<br>$$<br>f(x)=sign(w\cdot x+b)<br>$$<br>称为感知机.</p><p>其中, $\omega$和$b$为感知机的模型参数,$\omega \in R^{n}$叫做权值(weight),$b \in R$叫做偏置,$\omega \cdot x$表示内积,$sign$是符号函数<br>$$<br>sign(x)= \begin{cases}<br>+1, x \geqslant 0\<br>-1, x&lt;0<br>\end{cases}<br>$$<br>感知机是一种线性分类模型,属于判别模型.</p><h4 id="几何解释"><a href="#几何解释" class="headerlink" title="几何解释"></a>几何解释</h4><p>$$<br>\omega \cdot x =0<br>$$</p><p>对应特征控件$R^{n}$中的一个超平面$S$,其中$\omega$是超平面法向量, $b$是超平面截距.这个超平面将特征空间划分为两个部分,位于两部分的点分别被分为正,负类.</p><h3 id="感知机学习策略"><a href="#感知机学习策略" class="headerlink" title="感知机学习策略"></a>感知机学习策略</h3><h4 id="数据集的线性可分性"><a href="#数据集的线性可分性" class="headerlink" title="数据集的线性可分性"></a>数据集的线性可分性</h4><p>给定一个数据集<br>$$<br>T = \lbrace (x_{1}, y_{1}), (x_{2}, y_{2}), \dots ,(x_{N}, y_{n}) \rbrace<br>$$<br>其中$x_{i} \in \chi=R^{n}, y_{i}\in Y={+1, -1}, i=1,2,\dots,N$,如果存在某个超平面$S$<br>$$<br>\omega\cdot x+b=0<br>$$<br>能够将数据集的正实例与负实例完全划分到超平面两侧</p><p>即对所有的$y_{i}=+1$的$i$有$\omega\cdot x+b&gt;0$对所有的$y_{i}=-1$实例有$\omega\cdot x&lt;0$</p><p>则称数据集$T$是线性可分数据集,否则为线性不可分</p><h4 id="感知机学习策略-1"><a href="#感知机学习策略-1" class="headerlink" title="感知机学习策略"></a>感知机学习策略</h4><p>假设训练数据集线性可分的,感知机学习的目标是求得一个能够将训练数据正负实例完全正确分开的分离超平面,也即确定感知机模型参数$\omega$与$b$</p><p><strong>损失函数</strong>采用误分类的点到超平面总距离作为损失函数,损失函数极小化的$\omega$和$b$就是感知机参数了,任意一点$x_{0}$到超平面距离:<br>$$<br>\frac{1}{\lVert \omega\rVert}\lvert\omega\cdot x_{0}+b\rvert<br>$$<br>优化损失函数,我们考虑对误分类的点进行处理即可,对于误分类的点将绝对值符号去掉<br>$$<br>-\frac{1}{\lVert\omega\rVert}y_{i}(\omega\cdot x_{i}+b)<br>$$<br>假设误分类的点集合$M$,那么总距离是<br>$$<br>-\frac{1}{\lVert\omega\rVert}\sum_{x_{i}\in M}y_{i}(\omega\cdot x_{i}+b)<br>$$<br>不考虑$\frac{1}{\lVert\omega\rVert}$就可以得到损失函数了</p><p>损失函数即:<br>$$<br>L(\omega, b)=-\sum_{x_{i}\in M}y_{i}(\omega\cdot x_{i}+b)<br>$$<br>显然损失函数是非负的,如果没有误分类的点,损失函数为0,误分类的点越少损失函数越小.</p><h4 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a>学习算法</h4><p>采用随机梯度下降法,人选取一个超平面$\omega_{0}, b_{0}$,采用梯度下降不断极小化目标函数</p><p>也即在对误分类点集$M$,损失函数$L(\omega, b)$的梯度由:<br>$$<br>\nabla_{\omega}L(\omega, b)= -\sum_{x_{i}\in M}y_{i}x_{i} \<br>\nabla_bL(\omega, b)=-\sum_{x_{i}\in M}y_{i}<br>$$<br>确定,即随机选取一个误分类点$(x_{i},y_{i})$对参数进行更新:<br>$$<br>\omega \gets \omega+\eta y_{i}x_{i} \<br>b \gets b+\eta y_{i}<br>$$<br>其中$\eta$是步长也就是学习率</p><p>这里更新的过程就是按照梯度下降的方法对其进行求导的过程,然后按照步长进行更新</p><h4 id="收敛性"><a href="#收敛性" class="headerlink" title="收敛性"></a>收敛性</h4><p>可以证明对于线性可分数据集感知机学习算法可以经过有限次迭代得到一个将训练数据集完全正确划分的分离超平面感知机模型.</p><p>为了方便叙述,将$b$加入权重向量$\omega$记作$\hat{\omega}=(\omega^{T}, b)^{T}$,对输入向量添加常数1,即$\hat{x}=(x^{T},1)^{T}$,这时$\hat{\omega}\cdot\hat{x}=\omega\cdot x$</p><p><strong>定理(1)</strong>:存在满足条件的$\lVert \hat{\omega}\rVert=1$的超平面$\hat{\omega}_{opt} \hat{x}=\omega_{opt} \cdot x+b_{opt} =0$ </p><p>对$\gamma&gt;0$,对所有的$i=1,2,\dots,N$有<br>$$<br>y_{i}(\hat{\omega}_{opt}\cdot\hat{x})=y_{i}(\omega_{opt}\cdot x+b_{opt})\ge\gamma\tag{1}<br>$$<br><strong>证明</strong>:</p><p>存在这样的超平面对数据集完全划分的话,则对任意点$x_{i}$都是正确分类的均有<br>$$<br>y_{i}(\hat{\omega}_{opt}\cdot\hat{x_{i}})=y_{i}(\omega_{opt}\cdot x_{i}+b_{opt})&gt;0<br>$$<br>所以存在<br>$$<br>\gamma=\min_{i}\lbrace(y_{i}(\omega_{opt}\cdot x_{i}+b_{opt}))\rbrace<br>$$<br>使<br>$$<br>y_{i}(\hat{\omega}_{opt}\cdot\hat{x_{i}})=y_{i}(\omega_{opt}\cdot x_{i}+b_{opt})\ge\gamma<br>$$<br><strong>定理(2)</strong>:令$R=\max_{1\le i\le N}\lVert\hat{x}_{i}\rVert$则感知机算法在训练数据机上的分类次数$k$满足<br>$$<br>k\le \left( \frac{R}{\gamma}\right)^{2}\tag{2}<br>$$<br><strong>证明</strong>:</p><p>感知机算法从$\hat{\omega}=0$开始,如果遇到误分类就更新权重.令$\hat{\omega}_{k-1}$是第$k$个误分类点要更新的权重向量,即<br>$$<br>\hat{\omega}_{k-1}=(\omega^{T}_{k-1}, b_{k-1})^{T}<br>$$<br>则第$k$个误分类点$(x_{i}, y_{i})$的判断条件是<br>$$<br>y_{i}(\hat{\omega}_{k-1}\cdot\hat{x_{i}})=y_{i}(\omega_{k-1}\cdot x_{i}+b_{k-1})\le0\tag{3}<br>$$<br>此时对$\omega$和$b$的更新是<br>$$<br>\omega_{k} \gets \omega_{k-1}+\eta y_{i}x_{i}\<br>b_{k} \gets b_{k-1}+\eta y_{i}<br>$$<br>也即<br>$$<br>\hat{\omega}_{k}=\hat{\omega}_{k-1}+\eta y_{i}\hat{x}_{i}\tag{4}<br>$$<br>推导两个不等式:<br>$$<br>\hat{\omega}_{k}\cdot\hat{\omega}_{opt}\ge k\eta\gamma\tag{5}<br>$$<br>带入上述(1)(4)公式:<br>$$<br>\begin{align}<br>\hat{\omega}_{k}\cdot\hat{\omega}_{opt}  = &amp; \hat{\omega}_{k-1}\cdot\hat{\omega}_{opt}+\eta y_{i}\hat{\omega}_{opt}\hat{x}_{i}\\<br>\ge &amp; \hat{\omega}_{k-1}\cdot\hat{\omega}_{opt} +\eta\gamma<br>\end{align}<br>$$<br>这就获得一个递推公式:<br>$$<br>\hat{\omega}_{k}\cdot\hat{\omega}_{opt}<br>\ge  \hat{\omega}_{k-1}\cdot\hat{\omega}_{opt} +\eta\gamma<br>\ge\hat{\omega}_{k-2}\cdot\hat{\omega}_{opt} +2\eta\gamma<br>\ge k\eta\gamma<br>$$<br>第二个不等式:<br>$$<br>\lVert\hat{\omega}_{k}\rVert^{2}\le k\eta^{2}R^{2}\tag{6}<br>$$<br>带入(3)(4)展开即可:<br>$$<br>\begin{align}<br>\lVert\hat{\omega}_{k}\rVert^{2}= &amp;\lVert\hat{\omega}_{k-1}+\eta y_{i}\hat{x}_{i}\rVert^{2}\\<br>=&amp;\lVert\hat{\omega}_{k-1}\rVert^{2}+2\eta y_{i}\hat{\omega}_{k-1}\hat{x}_{i}+\eta^{2}\lVert\hat{x}_{i}\rVert^{2}\\<br>\le&amp;\lVert\hat{\omega}_{k-1}\rVert^{2}+\eta^{2}\lVert\hat{x}_{i}\rVert^{2}\\<br>\le&amp; \lVert\hat{\omega}_{k-1}\rVert^{2}+\eta^{2}R^{2}\\<br>\end{align}<br>$$<br>同样也是个递推公式,可以得到:<br>$$<br>\lVert\hat{\omega}_{k}\rVert^{2}\le k\eta^{2}R^{2}<br>$$<br>也即:<br>$$<br>\lVert\hat{\omega}_{k}\rVert\le\sqrt{k}\eta R\tag{7}<br>$$<br>利用向量内积$\le$向量模的积,连接(5)(7)即:<br>$$<br>k\eta\gamma \le\hat{\omega}_{k}\cdot\hat{\omega}_{opt}\le\lVert\hat{\omega}_{k}\rVert\lVert\hat{\omega}_{opt}\rVert\le\sqrt{k}\eta R<br>$$<br>也即<br>$$<br>k\eta\gamma \le\sqrt{k}\eta R<br>$$<br>整理即:<br>$$<br>k\le \left( \frac{R}{\gamma}\right)^{2}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;感知机算法-PLA&quot;&gt;&lt;a href=&quot;#感知机算法-PLA&quot; class=&quot;headerlink&quot; title=&quot;感知机算法(PLA)&quot;&gt;&lt;/a&gt;感知机算法(PLA)&lt;/h3&gt;&lt;p&gt;感知机(perceptron)是二分类的线性分类模型,输入为实例的特征向量,输出
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Centos配置vim</title>
    <link href="http://yoursite.com/2018/07/08/Centos%E9%85%8D%E7%BD%AEvim/"/>
    <id>http://yoursite.com/2018/07/08/Centos配置vim/</id>
    <published>2018-07-08T15:13:08.000Z</published>
    <updated>2018-08-27T03:03:10.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载安装脚本"><a href="#下载安装脚本" class="headerlink" title="下载安装脚本"></a>下载安装脚本</h3><p>用了很长一段时间vimplus,觉得蛮好用的而且插件很全功能也很丰富</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/chxuan/vimplus.git ~/.vimplus</span><br><span class="line">cd ~/.vimplus</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>安装好之后可以看到YCM的版本兼容提示,centos自带的vim7.4版本过低,要升级8.0</p><p>以下操作以<strong>root</strong>身份执行</p><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://copr.fedorainfracloud.org/coprs/mcepl/vim8/repo/epel-7/mcepl-vim8-epel-7.repo -o /etc/yum.repos.d/mcepl-vim8-epel-7.repo</span><br></pre></td></tr></table></figure><h3 id="清理旧版本"><a href="#清理旧版本" class="headerlink" title="清理旧版本"></a>清理旧版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum remove vim</span><br><span class="line">yum remove vim-minimal</span><br></pre></td></tr></table></figure><h3 id="安装新版本"><a href="#安装新版本" class="headerlink" title="安装新版本"></a>安装新版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install vim </span><br><span class="line">yum install sudo</span><br></pre></td></tr></table></figure><p>直接升级或者安装vim8.0会产生一些冲突,所以上面先把原来的vim相关的都清掉</p><h3 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h3><p>安装好后执行更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>会提示<code>libstdc++-4.8.5</code>的版本冲突,可以按照如下操作解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove libstdc++-(冲突的文件)</span><br><span class="line">sudo yum install gdb -y</span><br></pre></td></tr></table></figure><p>打开vim后的可能会有<code>startify: Can&#39;t read viminfo file.</code>提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.viminf*      # If you want to see the files.</span><br><span class="line">rm -rf ~/.viminf*  # Remove them.</span><br><span class="line">chmod o+w ~/.viminfo</span><br></pre></td></tr></table></figure><p>到这就正常使用了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载安装脚本&quot;&gt;&lt;a href=&quot;#下载安装脚本&quot; class=&quot;headerlink&quot; title=&quot;下载安装脚本&quot;&gt;&lt;/a&gt;下载安装脚本&lt;/h3&gt;&lt;p&gt;用了很长一段时间vimplus,觉得蛮好用的而且插件很全功能也很丰富&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="centos7" scheme="http://yoursite.com/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Centos安装python3与pip3</title>
    <link href="http://yoursite.com/2018/07/07/Centos%E5%AE%89%E8%A3%85python3%E4%B8%8Epip3/"/>
    <id>http://yoursite.com/2018/07/07/Centos安装python3与pip3/</id>
    <published>2018-07-07T11:51:07.000Z</published>
    <updated>2018-07-07T11:57:55.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install gcc  </span><br><span class="line">sudo yum -y install zlib zlib-devel</span><br><span class="line">sudo yum -y install libffi-devel </span><br><span class="line">sudo yum -y install openssl-devel ncurses-devel</span><br></pre></td></tr></table></figure><h3 id="下载python3-7"><a href="#下载python3-7" class="headerlink" title="下载python3.7"></a>下载python3.7</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br></pre></td></tr></table></figure><h3 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a>创建安装目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/local/python3</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.7.0.tgz</span><br><span class="line"></span><br><span class="line">cd Python-3.7.0/</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/python3 --enable-optimizations</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>加了<code>--enable-optimizations</code>之后时间比较久,但是用于提升python的性能</p><h3 id="创建python3链接"><a href="#创建python3链接" class="headerlink" title="创建python3链接"></a>创建python3链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3.7 /usr/bin/python3</span><br></pre></td></tr></table></figure><h3 id="创建pip3链接"><a href="#创建pip3链接" class="headerlink" title="创建pip3链接"></a>创建pip3链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装必要依赖&quot;&gt;&lt;a href=&quot;#安装必要依赖&quot; class=&quot;headerlink&quot; title=&quot;安装必要依赖&quot;&gt;&lt;/a&gt;安装必要依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PCA(主成成分分析)学习笔记</title>
    <link href="http://yoursite.com/2018/05/10/PCA-%E4%B8%BB%E6%88%90%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/10/PCA-主成成分分析-学习笔记/</id>
    <published>2018-05-10T08:23:46.000Z</published>
    <updated>2018-05-11T02:27:34.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>做机器学习训练时会遇到这样一个:原始数据特征的维度特别高,不利于模型的训练.这时候我们需要对原始数据的特征向量进行降维处理，然后将降维后的数据输入到模型中进行训练,得出最终的训练模型.<br>比如:</p><blockquote><p>比如拿到一个汽车的样本，里面既有以“千米/每小时”度量的最大速度特征，也有“英里/小时”的最大速度特征，显然这两个特征有一个多余。</p></blockquote><p>PCA就是用来对高维度数据进行降维,但是降维或多或少地会带来一定的信息损失,所以在实现PCA的时候要用到一定的策略减小损失–最大方差投影</p><h2 id="PCA的实现"><a href="#PCA的实现" class="headerlink" title="PCA的实现"></a>PCA的实现</h2><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>设有 m 条 n 维数据。<br>1）将原始数据按列组成 n 行 m 列矩阵 $X$<br>2）将$X$的每一行(代表一个属性字段)进行零均值化,即减去这一行的均值<br>3）求出协方差矩阵$C=\frac{1}{m}X\cdot X^{T}$<br>4）求出协方差矩阵的特征值及对应的特征向量<br>5）将特征向量按对应特征值大小从上到下按行排列成矩阵，取前 k 行组成矩阵 $P$<br>6）$Y = P \cdot X$即为降维到 k 维后的数据</p><h3 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h3><p>这部分是为了便于理解$PCA$</p><h4 id="数据的向量表示"><a href="#数据的向量表示" class="headerlink" title="数据的向量表示"></a>数据的向量表示</h4><p>一般情况下,数据都是一条一条记录的形式展现,比如</p><blockquote><p>淘宝店2012年全年的流量及交易情况中的一条记录如下</p><p>(日期, 浏览量, 访客数, 下单数, 成交数, 成交金额)</p></blockquote><p>由于日期是标记量,这里只关注后面的几个度量值$(500,240,25,13,2312.15)$这样就是一条数据的向量表示,习惯上我们把输入数据表示成列向量,也就是<br>$$<br>x = (500,240,25,13,2312.15)^{T}<br>$$<br>这样对于m行的n维数据就可以表示成<br>$$<br>X = (x_{1}, x_{2},\cdots,x_{n})<br>$$<br>$x_{i}$都是列向量</p><h4 id="向量的内积"><a href="#向量的内积" class="headerlink" title="向量的内积"></a>向量的内积</h4><p>向量$A=(a_{1}, a_{2},\cdots,a_{n})^{T}$与向量$B=(b_{1}, b_{2}, \cdots, b_{n})^{T}$的内积表示如下:<br>$$<br>A\cdot B=a_{1}b_{1}+a_{2}b_{2}+\cdots+a_{n}b_{n}=\sum_{i=1}^{n}a_{i}b_{i}<br>$$<br>为了方便看到几何关系,把内积写成$A\cdot B=|A||B|\cos(\alpha)$内积也就是A在B方向上的投影,当B的模为1的时候就可以简化成<br>$$<br>A\cdot B= |A|\cos(\alpha)<br>$$<br><strong>设向量B的模为1，则A与B的内积值等于A向B所在直线投影的矢量长度</strong></p><h4 id="向量的基"><a href="#向量的基" class="headerlink" title="向量的基"></a>向量的基</h4><p>以二维向量$A=(3,2)$为例,我们很熟悉的表示成直角坐标系的点$(3,2)$,这里要注意的是采用直角坐标系的同时是默认了x,y轴上各自长度为1的单位向量$(1,0), (0,1)$作为基,又上面内积的解释可以看到向量$A =  3(1,0)^{T}+2(0,1)^{T}$.</p><blockquote><p>我们之所以默认选择(1,0)和(0,1)为基，当然是比较方便，因为它们分别是x和y轴正方向上的单位向量，因此就使得二维平面上点坐标和向量一一对应，非常方便。但实际上任何两个线性无关的二维向量都可以成为一组基，所谓线性无关在二维平面内可以直观认为是两个不在一条直线上的向量。</p></blockquote><p>例如，(1,1)和(-1,1)也可以成为一组基。一般来说，我们希望基的模是1，因为从内积的意义可以看到，如果基的模是1,实际上，对应任何一个向量我们总可以找到其同方向上模为1的向量,只要让两个分量分别除以模即可.得到单位基向量$(\frac{1}{\sqrt{2}},\frac{1}{\sqrt{2}}),(-\frac{1}{\sqrt{2}},\frac{1}{\sqrt{2}})$</p><p>现在，我们想获得(3,2)在新基上的坐标，即在两个方向上的投影矢量值，那么根据内积的几何意义，我们只要分别计算(3,2)和两个基的内积，不难得到新的坐标为$(\frac{5}{\sqrt{2}},-\frac{1}{\sqrt{2}})$下图给出了新的基以及(3,2)在新基上坐标值的示意图：</p><p><img src="/2018/05/10/PCA-主成成分分析-学习笔记/05.png" alt="基转化"></p><h4 id="向量基变换"><a href="#向量基变换" class="headerlink" title="向量基变换"></a>向量基变换</h4><blockquote><p>两个矩阵相乘的意义是将右边矩阵中的每一列列向量变换到左边矩阵中每一行行向量为基所表示的空间中去</p></blockquote><p>对于更一般的情况,$N$维空间$m$个向量进行基变换,变换到$R$个$N$维向量为基的空间中,</p><p>将基向量按行组成矩阵$A=(p_{1},p_{2},\cdots,p_{N})^{T}$,其中$p_{i}={p_{i1},p_{i2},\cdots,p_{i_N}}$</p><p>将m个N维向量按列组成矩阵$B$,则$A\cdot B$就是变换后的结果组成的矩阵</p><p><img src="/2018/05/10/PCA-主成成分分析-学习笔记/基变换.png" alt="基变换公式"></p><p>行向量$p_{i}$表示第i个基,列向量$x_{j}$就表示第j个向量,右侧矩阵对应m列也就是变换之后的m个R维向量</p><p>由于这里R可以小于N,所以也就实现了降维.</p><h4 id="降维的约束条件"><a href="#降维的约束条件" class="headerlink" title="降维的约束条件"></a>降维的约束条件</h4><p>到上面的基变换我们也就初步可以实现降维了,但是现在的问题是怎样降维才是最好的,使损失最小?例如,有$(2,1),(0,1)$这两个向量,想降到一维,也就是投影到某个方向的直线上,如果选取x轴方向就是两个点0,2,但如果选取y轴方向,两个点的变换结果就重合了,这时候就损失掉了一个点,这样的变换就是不好的,所以这里就要解决这样的问题,让变换之后的结果尽可能多的保留.</p><p>显然,变换后的结果要尽可能的分散,离散开来就可以减少损失,这里我们用<strong>方差</strong>衡量上述一维变换的结果的离散程度,方差公式<br>$$<br>Var(x) = \frac{1}{m}\sum_{i=1}^{m}(x_{i}-\mu)^{2}<br>$$<br>由于处理前对数据进行平均值为0的处理,结果简化为<br>$$<br>V(x)=\frac{1}{m}\sum_{i=1}^{m}x^{2}_{i}<br>$$<br>这时候也就是找到一个一维的方向使得结果的方差最大即可</p><p>现在有另外一个问题就是,变换后的维度超过一维的话,比如三维到二维的变换,是要先确定一个维度,再确定另一个,如果都按照这个方差最大来实现,那么这两个维度应该是”重合”的了,显然还要另外一个条件来约束,使得我们确定一个维度之后,其他的维度不能与他”重合”,这里就使用了<strong>协方差</strong>,所谓的”重合”也就是这两个维度过分相关,而我们希望他们最好是没有线性相关性的,而这个相关性就是用协方差表示,<br>$$<br>Cov(X,Y)=E((X-\mu)(Y-\nu))<br>$$<br>同样由于对数据都已经均值为0处理,协方差也可以简化<br>$$<br>Cov(X,Y) = \frac{1}{m}\sum_{i=1}^{m}x_{i}y_{i}<br>$$<br>这样就可以求得两个方向的相关性,让其非线性相关也就是协方差为0,也就是在前一个向量的正交方向上选择,这里也就验证了,我们习惯性建系后选取$(0,1),(1,0)$两个线性无关方向作为基,</p><p>到这就找到降维的优化目标:<strong>从$N$维降到$R$维时,选取$R$个正交基使得变换之后各字段方差最大,各自间协方差为0</strong></p><h4 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a>协方差矩阵</h4><p>到这里,引入协方差矩阵,对于矩阵$X$称$C = \frac{1}{m}XX^{T}$是X的协方差矩阵</p><p>如m个二维向量组成<br>$$<br>X =\begin{pmatrix} x_{1} &amp; x_{2}  &amp; \cdots &amp;x_{m} \\<br>y_{1} &amp; y_{2}  &amp; \cdots &amp;y_{m}<br>\end{pmatrix}<br>$$<br>求出协方差矩阵</p><p><img src="/2018/05/10/PCA-主成成分分析-学习笔记/协方差矩阵.png" alt="协方差矩阵"></p><p>协方差矩阵中完美包含了上面讨论的两个因素,方差和协方差,并且对角线上是方差,此外i行j列与j行i列是同一个协方差</p><h4 id="协方差矩阵对角化"><a href="#协方差矩阵对角化" class="headerlink" title="协方差矩阵对角化"></a>协方差矩阵对角化</h4><p>上面协方差矩阵引入之后,就可以发现,优化降维条件就是对协方差矩阵对角化,除了对角线外其他元素都是0(协方差为0),然后按照对角线上元素(方差)从大到小选取前R个,就是我们降维之后的R个正交基.</p><p>验证:假设原始$X$对应的协方差矩阵$C$,$P$是一组基按行组成的矩阵(降维的矩阵),设结果为Y,$Y=P\cdot X$,则表示Y的协方差D可得:<br>$$<br>D = \frac{1}{m}YY^{T}<br>=\frac{1}{m}PXX^{T}P^{T}<br>=P(\frac{1}{m}XX^{T})P^{T}<br>=PCP^{T}<br>$$<br>这也就验证了目标基组成的矩阵就是让协方差对角化的矩阵P,只要找到对角矩阵,然后按照对角元素从大到小选取前R个,即可找到变换的R维基,接着就是求解矩阵对角化,详细内容可以自己看一下线代里面的推到,这里就博客内容简要整理.</p><p>一个N维实对称方阵(协方差矩阵)一定可以找到N个正交的特征向量,记为$e_{1}, e_{2},\cdots,e_{N}$,按列组成矩阵<br>$$<br>E = (e_{1}, e_{2},\cdots,e_{N})<br>$$<br>对协方差运算<br>$$<br>E^{T}CE = \Lambda=\begin{pmatrix} \lambda_{1} \\<br>&amp; \lambda_{2} \\<br>&amp;&amp; \ddots\\<br>&amp;&amp;&amp;&amp; \lambda_{N}<br>\end{pmatrix}<br>$$<br>$\Lambda$就是目标对角矩阵,其中对角线上元素就是特征向量对应的特征值,所以目标的基就是$E^{T}$</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>$$<br>X = \begin{pmatrix}1 &amp; 1&amp; 2&amp; 4 &amp;2\\<br>1 &amp; 3 &amp; 3&amp;４&amp;４<br>\end{pmatrix}<br>$$</p><p>用$PCA$降维到1维</p><p>首先,对各个字段均值0化处理得到<br>$$<br>X = \begin{pmatrix} -1 &amp; -1 &amp; 0 &amp; 2 &amp; 0\\<br>-2 &amp; 0 &amp; 0 &amp; 1 &amp; 1<br>\end{pmatrix}<br>$$<br>求出协方差矩阵$C$<br>$$<br>C = \frac{1}{5}<br>\begin{pmatrix} -1 &amp; -1 &amp; 0 &amp; 2 &amp; 0\\<br>-2 &amp; 0 &amp; 0 &amp; 1 &amp; 1<br>\end{pmatrix}<br>\begin{pmatrix}<br>-1 &amp; -2 \\<br>-1 &amp; 0 \\<br>0 &amp; 0\\<br>2 &amp; 1\\<br>0 &amp; 1<br>\end{pmatrix}<br>= \begin{pmatrix}<br>\frac{6}{5} &amp; \frac{4}{5}\\<br>\frac{4}{5} &amp; \frac{6}{5}<br>\end{pmatrix}<br>$$<br>求解$C$的特征值:<br>$$<br>\lambda_{1} = 2, \lambda_{2} = 0.4<br>$$<br>降到1维,选取两者中大的那个$\lambda_{1} = 2$</p><p>求解一个特征向量<br>$$<br>c_{1} =\begin{pmatrix}<br>1 \\<br>1<br>\end{pmatrix}<br>$$<br>标准化特征向量后<br>$$<br>c = \begin{pmatrix}<br>\frac{1}{\sqrt{2}} &amp; \frac{1}{\sqrt{2}}<br>\end{pmatrix}<br>$$<br>求出结果<br>$$<br>Y = c\cdot X =\begin{pmatrix} -\frac{3}{\sqrt2} &amp;-\frac{1}{\sqrt2} &amp;0 &amp;\frac{3}{\sqrt2} &amp;-\frac{1}{\sqrt2} &amp;<br>\end{pmatrix}<br>$$</p><hr><p>参考内容:</p><p><a href="http://blog.codinglabs.org/articles/pca-tutorial.html" target="_blank" rel="noopener">PCA数学原理</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E6%96%B9%E5%B7%AE" target="_blank" rel="noopener">协方差矩阵</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;做机器学习训练时会遇到这样一个:原始数据特征的维度特别高,不利于模型的训练.这时候我们需要对原始数据的特征向量进行降维处理，然后将降维后的数
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="PCA" scheme="http://yoursite.com/tags/PCA/"/>
    
  </entry>
  
  <entry>
    <title>Django2.0博客教程(四)功能完善</title>
    <link href="http://yoursite.com/2018/05/05/Django2-0%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E5%9B%9B-%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/"/>
    <id>http://yoursite.com/2018/05/05/Django2-0博客教程-四-功能完善/</id>
    <published>2018-05-05T15:19:57.000Z</published>
    <updated>2018-05-05T15:19:57.602Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django2-0博客教程(三)更多页面的实现</title>
    <link href="http://yoursite.com/2018/05/05/Django2-0%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%B8%89-%E6%9B%B4%E5%A4%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/05/05/Django2-0博客教程-三-更多页面的实现/</id>
    <published>2018-05-05T06:47:13.000Z</published>
    <updated>2018-05-05T08:39:54.633Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文章详情-分类-标签-归档视图"><a href="#文章详情-分类-标签-归档视图" class="headerlink" title="文章详情/分类/标签/归档视图"></a>文章详情/分类/标签/归档视图</h3><p>博客的主页已经可以运行了,这里就给博客添加更多的功能,也就是在<code>views.py</code>中添加更多的视图函数</p><h4 id="文章详情函数"><a href="#文章详情函数" class="headerlink" title="文章详情函数"></a>文章详情函数</h4><p>修改<code>blog/views.py</code>,添加<code>detail</code>函数,用于显示文章内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, post_id)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情页</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :param post_id: 文章id</span></span><br><span class="line"><span class="string">    :return: post page</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post = Article.objects.get(id=str(post_id))     <span class="comment"># 通过id获取文章实体</span></span><br><span class="line">        post.viewed()                                   <span class="comment"># 更新浏览次数</span></span><br><span class="line">        tags = post.tags.all()                          <span class="comment"># 获取文章对应所有标签</span></span><br><span class="line">    <span class="keyword">except</span> Article.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'post.html'</span>, &#123;<span class="string">'post'</span>: post,</span><br><span class="line">                                         <span class="string">'tags'</span>: tags,&#125;)</span><br></pre></td></tr></table></figure><h4 id="分类函数"><a href="#分类函数" class="headerlink" title="分类函数"></a>分类函数</h4><p>添加<code>category</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">category</span><span class="params">(request, category_id)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情页</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :param category_id: 分类id</span></span><br><span class="line"><span class="string">    :return: category page</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    posts = Article.objects.filter(category_id=str(category_id))</span><br><span class="line">    category = categories.get(id=str(category_id))    <span class="comment"># 通过id获取分类实体</span></span><br><span class="line">    paginator = Paginator(posts, settings.PAGE_NUM)   <span class="comment"># 获取文章对应所有标签</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>)   <span class="comment"># 获取URL中page参数的值</span></span><br><span class="line">        post_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        post_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        post_list = paginator.page(paginator.num_pages)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'category.html'</span>, &#123;<span class="string">'post_list'</span>: post_list,</span><br><span class="line">                                             <span class="string">'category'</span>: category,&#125;)</span><br></pre></td></tr></table></figure><h4 id="标签函数"><a href="#标签函数" class="headerlink" title="标签函数"></a>标签函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(request, tag)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情页</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :param tag: 标签内容</span></span><br><span class="line"><span class="string">    :return: tag page</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    posts = Article.objects.filter(tags__name__contains=tag)</span><br><span class="line">    paginator = Paginator(posts, settings.PAGE_NUM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">        post_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        post_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        post_list = paginator.page(paginator.num_pages)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'tag.html'</span>, &#123;<span class="string">'post_list'</span>: post_list,</span><br><span class="line">                                        <span class="string">'tag'</span>: tag&#125;)</span><br></pre></td></tr></table></figure><h4 id="归档函数"><a href="#归档函数" class="headerlink" title="归档函数"></a>归档函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archives</span><span class="params">(request, year, month)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    归档页面</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :param year: 年份</span></span><br><span class="line"><span class="string">    :param month: 月份</span></span><br><span class="line"><span class="string">    :return: archives page</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    posts = Article.objects.filter(pub_time__year=year, pub_time__month=month).order_by(<span class="string">'-pub_time'</span>)</span><br><span class="line">    paginator = Paginator(posts, settings.PAGE_NUM)  <span class="comment"># 每页显示数量</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>)  <span class="comment"># 获取URL中page参数的值</span></span><br><span class="line">        post_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        post_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        post_list = paginator.page(paginator.num_pages)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'archive.html'</span>, &#123;</span><br><span class="line">        <span class="string">'post_list'</span>: post_list,</span><br><span class="line">        <span class="string">'category_list'</span>: categories,</span><br><span class="line">        <span class="string">'months'</span>: months,</span><br><span class="line">        <span class="string">'year_month'</span>: year+<span class="string">'年'</span>+month+<span class="string">'月'</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><p>修改<code>blog/urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    path(<span class="string">'home/'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:post_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    path(<span class="string">'category/&lt;int:category_id&gt;/'</span>, views.category, name=<span class="string">'category'</span>),</span><br><span class="line">    path(<span class="string">'tag/&lt;str:tag&gt;/'</span>, views.tag, name=<span class="string">'tag'</span>),</span><br><span class="line">    path(<span class="string">'archives/&lt;str:year&gt;/&lt;str:month&gt;'</span>, views.archives, name=<span class="string">'archives'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>为刚刚新写的几个函数添加对应的路由</p><p>启动项目,添加一些标签/分类.,创建文章就可以看到效果了</p><p><img src="/2018/05/05/Django2-0博客教程-三-更多页面的实现/分类.png" alt=""></p><h3 id="完善显示部分"><a href="#完善显示部分" class="headerlink" title="完善显示部分"></a>完善显示部分</h3><p>在<code>base.html</code>中显示分类和归档详情,但是上述几个视图函数仅仅实现了自己的功能,并没有传入分类和归档信息,这里修改<code>blog/views.py</code>添加上相应信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个全局变量,后面每个函数都会用到</span></span><br><span class="line">categories = Category.objects.all()  <span class="comment"># 获取全部的分类对象</span></span><br><span class="line">months = Article.objects.values_list(<span class="string">'pub_time'</span>, flat=<span class="keyword">True</span>)  <span class="comment"># 获取文章时间归档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个函数最后的传参部分添加 months和category_list参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    主页视图</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :return: homepage</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    posts = Article.objects.all()                       <span class="comment"># 获取全部的Article对象</span></span><br><span class="line">    paginator = Paginator(posts, settings.PAGE_NUM)     <span class="comment"># 每页显示数量，对应settings.py中的PAGE_NUM</span></span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)                      <span class="comment"># 获取URL中page参数的值</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        post_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        post_list = paginator.page(paginator.num_pages)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>, &#123;<span class="string">'post_list'</span>: post_list,</span><br><span class="line">                                         <span class="string">'months'</span>: months,   <span class="comment"># 注意添加的months</span></span><br><span class="line">                                         <span class="string">'category_list'</span>: categories&#125;)  <span class="comment"># 注意添加的category_list</span></span><br><span class="line"><span class="comment"># 每个函数都添加这两个变量</span></span><br></pre></td></tr></table></figure><p>完整的最终代码可以在github的项目中看到,到这页面显示部分就完成了</p><h4 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h4><p>如果后端使用的是MySql,可能会在在归档页面按照年月查询不到文章列表,这时由于Mysql中的时区转化问题导致查询结果总是为<code>NULL</code></p><p>解决办法:执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql -p</span><br></pre></td></tr></table></figure><p>详细解决过程我是参考了这篇<a href="http://chowyi.com/2017/09/19/Django%E4%BD%BF%E7%94%A8MySQL%E5%90%8E%E7%AB%AF%E6%97%A5%E6%9C%9F%E4%B8%8D%E8%83%BD%E6%8C%89%E6%9C%88%E8%BF%87%E6%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" target="_blank" rel="noopener">博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文章详情-分类-标签-归档视图&quot;&gt;&lt;a href=&quot;#文章详情-分类-标签-归档视图&quot; class=&quot;headerlink&quot; title=&quot;文章详情/分类/标签/归档视图&quot;&gt;&lt;/a&gt;文章详情/分类/标签/归档视图&lt;/h3&gt;&lt;p&gt;博客的主页已经可以运行了,这里就给博
      
    
    </summary>
    
      <category term="Django博客教程" scheme="http://yoursite.com/categories/Django%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="博客教程" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Django2.0博客教程(二)_初步搭建博客</title>
    <link href="http://yoursite.com/2018/05/02/Django2-0%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%BA%8C-%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/02/Django2-0博客教程-二-初步搭建博客/</id>
    <published>2018-05-02T13:10:40.000Z</published>
    <updated>2018-05-05T07:37:44.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编辑博客model文件"><a href="#编辑博客model文件" class="headerlink" title="编辑博客model文件"></a>编辑博客model文件</h3><p>编辑<code>blog/model.py</code>,model部分也就是博客的数据库存储和操作部分,用于前后数据的交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建Tag模型</span></span><br><span class="line"><span class="string">    ==========</span></span><br><span class="line"><span class="string">    包含字段:</span></span><br><span class="line"><span class="string">    name</span></span><br><span class="line"><span class="string">    created_time</span></span><br><span class="line"><span class="string">    update_time</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'标签名'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    created_time = models.DateTimeField(verbose_name=<span class="string">'创建时间'</span>, default=now)</span><br><span class="line">    update_time = models.DateTimeField(verbose_name=<span class="string">'修改时间'</span>, default=now)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        设置显示名称</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        设置模型属性</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ordering = [<span class="string">'name'</span>]                 <span class="comment"># 按照name排序</span></span><br><span class="line">        verbose_name = <span class="string">'标签名称'</span>            <span class="comment"># 指定后台显示模型名称</span></span><br><span class="line">        verbose_name_plural = <span class="string">'标签列表'</span>     <span class="comment"># 指定后台显示模型复数名称</span></span><br><span class="line">        db_table = <span class="string">"tag"</span>                    <span class="comment"># 数据库表名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建分类模型</span></span><br><span class="line"><span class="string">    ==========</span></span><br><span class="line"><span class="string">    包含字段:</span></span><br><span class="line"><span class="string">    name</span></span><br><span class="line"><span class="string">    created_time</span></span><br><span class="line"><span class="string">    uopdate_time</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'类别名称'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    created_time = models.DateTimeField(verbose_name=<span class="string">'创建时间'</span>, default=now)</span><br><span class="line">    update_time = models.DateTimeField(verbose_name=<span class="string">'修改时间'</span>, default=now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'name'</span>]</span><br><span class="line">        verbose_name = <span class="string">"类别名称"</span></span><br><span class="line">        verbose_name_plural = <span class="string">'分类列表'</span></span><br><span class="line">        db_table = <span class="string">"category"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    创建文章模型</span></span><br><span class="line"><span class="string">    ==========</span></span><br><span class="line"><span class="string">    包含字段:</span></span><br><span class="line"><span class="string">    name</span></span><br><span class="line"><span class="string">    content</span></span><br><span class="line"><span class="string">    status</span></span><br><span class="line"><span class="string">    views</span></span><br><span class="line"><span class="string">    created_time</span></span><br><span class="line"><span class="string">    pub_time</span></span><br><span class="line"><span class="string">    update_time</span></span><br><span class="line"><span class="string">    categories</span></span><br><span class="line"><span class="string">    tags</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    STATUS_CHOICES = (</span><br><span class="line">        (<span class="string">'d'</span>, <span class="string">'草稿'</span>),</span><br><span class="line">        (<span class="string">'p'</span>, <span class="string">'发表'</span>),</span><br><span class="line">    )</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">'标题'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">'正文'</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    status = models.CharField(verbose_name=<span class="string">'状态'</span>, max_length=<span class="number">1</span>, choices=STATUS_CHOICES, default=<span class="string">'p'</span>)</span><br><span class="line">    views = models.PositiveIntegerField(verbose_name=<span class="string">'浏览量'</span>, default=<span class="number">0</span>)</span><br><span class="line">    created_time = models.DateTimeField(verbose_name=<span class="string">'创建时间'</span>, default=now)</span><br><span class="line">    pub_time = models.DateTimeField(verbose_name=<span class="string">'发布时间'</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(verbose_name=<span class="string">'修改时间'</span>, default=now)</span><br><span class="line">    categories = models.ForeignKey(Category, verbose_name=<span class="string">'分类'</span>, on_delete=models.CASCADE, blank=<span class="keyword">False</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    tags = models.ManyToManyField(Tag, verbose_name=<span class="string">'标签集合'</span>, blank=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">viewed</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        浏览记录+1</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.views += <span class="number">1</span></span><br><span class="line">        self.save(update_fields=[<span class="string">'views'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_article</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取下一篇文章</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Article.objects.filter(id__gt=self.id, status=<span class="string">'p'</span>, pub_time__isnull=<span class="keyword">False</span>).first()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prev_article</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取前一篇文章</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Article.objects.filter(id__lt=self.id, status=<span class="string">'p'</span>, pub_time__isnull=<span class="keyword">False</span>).first()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-pub_time'</span>]                <span class="comment"># 按文章创建日期降序</span></span><br><span class="line">        verbose_name = <span class="string">'文章'</span>                    <span class="comment"># 指定后台显示模型名称</span></span><br><span class="line">        verbose_name_plural = <span class="string">'文章列表'</span>          <span class="comment"># 指定后台显示模型复数名称</span></span><br><span class="line">        db_table = <span class="string">'article'</span>                    <span class="comment"># 数据库表名</span></span><br><span class="line">        get_latest_by = <span class="string">'created_time'</span></span><br></pre></td></tr></table></figure><h4 id="注册模型"><a href="#注册模型" class="headerlink" title="注册模型"></a>注册模型</h4><p>编辑<code>blog/admin.py</code>文件,将模型绑定到admin上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"></span><br><span class="line">admin.site.register(Article)</span><br><span class="line">admin.site.register(Category)</span><br><span class="line">admin.site.register(Tag)</span><br></pre></td></tr></table></figure><p>进行数据库迁移</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>创建管理员身份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>填写信息之后,启动服务并登陆后台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8000/admin/</code>登录刚刚创建的管理员就可以看到后台内容</p><p><img src="/2018/05/02/Django2-0博客教程-二-初步搭建博客/admin.png" alt="admin"></p><p>可以创建标签分类和文章</p><p><img src="/2018/05/02/Django2-0博客教程-二-初步搭建博客/创建文章.png" alt="创建文章"></p><h3 id="创建博客主页"><a href="#创建博客主页" class="headerlink" title="创建博客主页"></a>创建博客主页</h3><p>在<code>settings.py</code>中添加主页显示页数的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE_L10N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">PAGE_NUM = <span class="number">5</span></span><br></pre></td></tr></table></figure><p>在最后添加<code>PAGE_NUM</code>,便于在后面使用分页时对页数的管理</p><p>在<code>blog</code>下创建<code>static</code>文件夹,把博客的静态文件都放进去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── css</span><br><span class="line">├── fonts</span><br><span class="line">├── image</span><br><span class="line">└── js</span><br></pre></td></tr></table></figure><p>在项目根目录下创建<code>templates</code>文件夹,把模板文件放进去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── archive.html</span><br><span class="line">├── base.html</span><br><span class="line">├── category.html</span><br><span class="line">├── home.html</span><br><span class="line">├── post.html</span><br><span class="line">└── tag.html</span><br></pre></td></tr></table></figure><p>编辑<code>blog/view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, PageNotAnInteger, EmptyPage</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    主页视图</span></span><br><span class="line"><span class="string">    :param request: 请求</span></span><br><span class="line"><span class="string">    :return: homepage</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    posts = Article.objects.all()                       <span class="comment"># 获取全部的Article对象</span></span><br><span class="line">    paginator = Paginator(posts, settings.PAGE_NUM)     <span class="comment"># 每页显示数量，对应settings.py中的PAGE_NUM</span></span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)                      <span class="comment"># 获取URL中page参数的值</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        post_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        post_list = paginator.page(paginator.num_pages)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>, &#123;<span class="string">'post_list'</span>: post_list&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建博客主页路由"><a href="#创建博客主页路由" class="headerlink" title="创建博客主页路由"></a>创建博客主页路由</h3><p>在<code>blog</code>中创建<code>urls.py</code>并编辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">    path(<span class="string">'home/'</span>, views.home, name=<span class="string">'home'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后编辑<code>myblog/urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后启动服务就可以看到主页了</p><p><img src="/2018/05/02/Django2-0博客教程-二-初步搭建博客/主页.png" alt="主页"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编辑博客model文件&quot;&gt;&lt;a href=&quot;#编辑博客model文件&quot; class=&quot;headerlink&quot; title=&quot;编辑博客model文件&quot;&gt;&lt;/a&gt;编辑博客model文件&lt;/h3&gt;&lt;p&gt;编辑&lt;code&gt;blog/model.py&lt;/code&gt;,model
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django2.0博客教程(一)_创建项目</title>
    <link href="http://yoursite.com/2018/05/01/Django2-0%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%B8%80-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/05/01/Django2-0博客教程-一-创建项目/</id>
    <published>2018-05-01T15:34:24.000Z</published>
    <updated>2018-05-05T08:51:55.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用pipenv创建项目"><a href="#使用pipenv创建项目" class="headerlink" title="使用pipenv创建项目"></a>使用pipenv创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir project</span><br><span class="line">cd project</span><br></pre></td></tr></table></figure><p>进入环境目录后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipenv install django</span><br><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><p>这样就进入了虚拟环境, pipenv大大简化了之前配置虚拟环境的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject myblog</span><br><span class="line">cd myblog</span><br><span class="line">django-admin startapp blog</span><br></pre></td></tr></table></figure><p>这样就创建了我们的Django博客项目,注意创建Django项目时的操作都是在pipenv-shell中的</p><h2 id="运行Django项目"><a href="#运行Django项目" class="headerlink" title="运行Django项目"></a>运行Django项目</h2><h3 id="初始化项目的配置分析"><a href="#初始化项目的配置分析" class="headerlink" title="初始化项目的配置分析"></a>初始化项目的配置分析</h3><p>Django项目的目录大致如下, 其中我们会涉及到的部分我简要标记了一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── blog-- app文件目录</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations-- 数据库迁移</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   ├── models.py-- model层</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py-- view层</span><br><span class="line">├── manage.py    -- 项目管理脚本</span><br><span class="line">└── myblog    -- 项目配置文件夹</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py-- 项目配置信息</span><br><span class="line">    ├── urls.py-- 项目url</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><p>进入到<code>myblog/settings.py</code>中,注意下面几个地方</p><h4 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>这是开发者模式,默认开启DEBUG,有助于我们开发过程中的调试,开启后会返回运行的异常信息,所以在上线之后一定要关闭DEBUG</p><h4 id="INSTALLED-APPS"><a href="#INSTALLED-APPS" class="headerlink" title="INSTALLED_APPS"></a>INSTALLED_APPS</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这是项目中要加载的app,上面都是默认的Django自带的一些库,比如<code>admin</code>这个后面也会讲到,我们之前创建了一个blog应用,仅仅是创建了Django是不知道的,要在这里添加进去才可以在项目中运行blog部分,在最后添加上<code>blog</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="DATABASES"><a href="#DATABASES" class="headerlink" title="DATABASES"></a>DATABASES</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是项目的数据库信息,这里用的是Django的默认配置<code>sqlite</code>的数据库,如果需要修改成其他的 ,修改掉<code>sqlite</code>并添加上对应的数据库信息就行,虽然这个blog系统很简单用<code>sqlite</code>就可以了,不过为了学习起见,这里采用MySql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'dbname'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'username'</span>,    </span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'password'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'hostname'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'CHARSET'</span>:<span class="string">'utf8'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应修改上面的mysql信息即可</p><p>要注意的是</p><ol><li><p><code>CHARSET</code>是指定编码格式, 这里的编码一定要和数据库创建时的编码一致才行,否做就会出现乱码报错,创建数据库时最好就手动指定编码格式(如下),如果你想要抓取一些评论信息,由于评论中有表情符号,要采用<code>utf8mb4</code>,数据库和django都指定成<code>utf8mb4</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database dbname character set &apos;utf8&apos;;</span><br></pre></td></tr></table></figure></li><li><p>切换成Mysql引擎后Django运行可能会提示没有<code>mysqlclient</code>,如果pipenv安装报错,请尝试先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sduo apt install libmysqlclinet-dev</span><br></pre></td></tr></table></figure></li><li><p>如果使用其他的数据库比如类似的写好配置信息并安装所需的操作库即可</p></li></ol><h4 id="时区和语言"><a href="#时区和语言" class="headerlink" title="时区和语言"></a>时区和语言</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'UTC'</span></span><br></pre></td></tr></table></figure><p>Django默认的是英语和UTC时区,时区的不一致会导致后面在数据库中插入和读取时间的不一致问题,这里我们改成<code>Asia/Shanghai</code></p><p>至于语言也可以更换成中文,不过这个不怎么重要,更换成中文的话,修改成<code>zh-Hans</code>即可,另外其他的时区和语言可以自行搜索一下就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><h4 id="TEMPLATES"><a href="#TEMPLATES" class="headerlink" title="TEMPLATES"></a>TEMPLATES</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意<code>DIRS</code>是模板的路径,可以自己指定,但为了方便在项目目录下创建<code>templates</code>文件夹即可</p><p>其他部分<code>BACKEND</code>和<code>OPTIONS</code>可以更换成其他的模板引擎,博客项目用默认的</p><p>如果用的PyCharm创建会默认生成模板路径,没有的话手动添加一下路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>), ],</span><br></pre></td></tr></table></figure><h4 id="STATIC"><a href="#STATIC" class="headerlink" title="STATIC"></a>STATIC</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br></pre></td></tr></table></figure><p>指定app中静态文件路径,在上线之后,Django会把静态文件全部打包到一个路径下方便部署</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"><span class="comment"># STATIC_ROOT 文件夹 是用来将所有STATICFILES_DIRS中所有文件夹中的文件，以及各app中static中的文件都复制过来</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'collected_static'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用来存放项目中公用的静态文件，里面不能包含 STATIC_ROOT</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"common_static"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>STATIC_ROOT</code>是在执行<code>collectstatic</code>之后把静态文件复制到的目录,<code>STATICFILES_DIRS</code>是项目中的app可以共享的静态文件目录,<code>STATIC_URL</code>则是app的静态目录</p><p>静态文件内容可以自行去文档中了解,也可以在后面的开发过程中会遇到时边做变了解</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>这样就可以在127.0.0.1:8000端口处看到项目效果了</p><p><img src="/2018/05/01/Django2-0博客教程-一-创建项目/初始化项目.png" alt="初始化项目"></p><p>(语言切换成了中文)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用pipenv创建项目&quot;&gt;&lt;a href=&quot;#使用pipenv创建项目&quot; class=&quot;headerlink&quot; title=&quot;使用pipenv创建项目&quot;&gt;&lt;/a&gt;使用pipenv创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Django博客教程" scheme="http://yoursite.com/categories/Django%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="博客教程" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>pipenv使用简记</title>
    <link href="http://yoursite.com/2018/05/01/pipenv%E4%BD%BF%E7%94%A8%E7%AE%80%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/01/pipenv使用简记/</id>
    <published>2018-05-01T15:08:45.000Z</published>
    <updated>2018-05-01T15:24:09.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用pipenv"><a href="#使用pipenv" class="headerlink" title="使用pipenv"></a>使用pipenv</h3><p>pipenv现在已经是官方推荐的包管理工具了,从命名上就能感受到它是集合了pip和virtualenv,对每一个项目单独的创建虚拟环境,创造相对独立的虚拟环境,类似于npm在项目中安装包的效果</p><h3 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><p>安装出现问题的话先检查下pip版本</p><p>权限问题的话就是带上sudo安装</p><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir project_name</span><br><span class="line">cd project_name</span><br></pre></td></tr></table></figure><p>创建项目位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>这样就在当前文件夹下生成了虚拟环境的配置文件, 都很类似与npm的使用了</p><p>文件夹下生成基本配置文件,</p><blockquote><p>Pipfile 里有最新安装的包文件的信息，如名称、版本等。用来 在重新安装项目依赖或与他人共享项目时，你可以用 Pipfile 来跟踪项目依赖。</p></blockquote><blockquote><p>Pipfile.lock 则包含你的系统信息，所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。</p></blockquote><p>进入项目环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><p>进入到虚拟环境中操作,注意pipenv与virtualens直接创建不同的是,生成的配置文件都在<code>.local/share/virtualenvs/</code>目录下</p><p>可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --venv</span><br></pre></td></tr></table></figure><p>查看配置文件信息</p><h3 id="一些基本使用"><a href="#一些基本使用" class="headerlink" title="一些基本使用"></a>一些基本使用</h3><p>安装需要的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install lib_name</span><br></pre></td></tr></table></figure><p>更新库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv update</span><br></pre></td></tr></table></figure><p>注意这个操作会删除所有库然后安装最新版</p><p>删除安装的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv uninstall lib_name</span><br></pre></td></tr></table></figure><p>把库名称换成参数<code>--all</code>则是删除所有库</p><p>查看库之间的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv graph</span><br></pre></td></tr></table></figure><p>帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv -h</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用pipenv&quot;&gt;&lt;a href=&quot;#使用pipenv&quot; class=&quot;headerlink&quot; title=&quot;使用pipenv&quot;&gt;&lt;/a&gt;使用pipenv&lt;/h3&gt;&lt;p&gt;pipenv现在已经是官方推荐的包管理工具了,从命名上就能感受到它是集合了pip和virtu
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="pipenv" scheme="http://yoursite.com/tags/pipenv/"/>
    
  </entry>
  
  <entry>
    <title>从正则直接到DFA</title>
    <link href="http://yoursite.com/2018/04/21/%E4%BB%8E%E6%AD%A3%E5%88%99%E7%9B%B4%E6%8E%A5%E5%88%B0DFA/"/>
    <id>http://yoursite.com/2018/04/21/从正则直接到DFA/</id>
    <published>2018-04-21T13:02:06.000Z</published>
    <updated>2018-04-22T13:44:14.008Z</updated>
    
    <content type="html"><![CDATA[<p>大致三个步骤:</p><ol><li>生成抽象语法树</li><li>计算<code>followpos</code></li><li>生成DFA</li></ol><p>原理: 重要状态</p><h3 id="以-a-b-abb-为例"><a href="#以-a-b-abb-为例" class="headerlink" title="以$(a|b)^{*}abb$为例"></a>以$(a|b)^{*}abb$为例</h3><h4 id="生成抽象语法树"><a href="#生成抽象语法树" class="headerlink" title="生成抽象语法树"></a>生成抽象语法树</h4><p>首先给正则表达式加上#作为结束符,保证接受状态是重要状态,生成抽象语法树</p><p><img src="/2018/04/21/从正则直接到DFA/抽象语法树.png" alt="抽象语法树"></p><p>注意: 可以给每个标号赋予序号id,方便后面使用时区分</p><h4 id="计算followpos函数-重点"><a href="#计算followpos函数-重点" class="headerlink" title="计算followpos函数(重点)"></a>计算followpos函数(重点)</h4><p>先理解下<code>nullable</code> ,<code>firstpos</code>, <code>lastpos</code>,<code>followpos</code>含义</p><p><strong>nullable</strong>(n):是返回以n为根节点的子表达式表示的语言中是否包含空串$\epsilon$如果可以包含就返回true.</p><p><img src="/2018/04/21/从正则直接到DFA/nullable.png" alt="nullable"></p><p>注意图中的两个节点,$n_{1}$处表示$(a|b)^{<em>}a$,虽然$(a|b)^{</em>}$可以是$\epsilon$但是接上一个$a$后不可能产生空串,所以$nullable(n_{1})=false$</p><p>$n_{2}$处表示$(a|b)^{*}$显然可以生成$\epsilon$所以$nullable(n_{2})=true$</p><p><strong>firstpos</strong>(n):返回的是一个集合,包含以n为跟的子表达式所能生成的语言中串的第一个符号集合.</p><p>依然看上图中的$n_{1}$处,表示的是$(a|b)^{*}a$,可以生成的语言有$\lbrace a, aa, aaa, aba, ba,\cdots  \rbrace$</p><p>第一个a是$(a|b)^{*}$为$\epsilon$时,也就是id为3的a,此时3就是结果集中的一个元素</p><p>$aa$的第一个$a$则是$(a|b)^{*}$只有一个$a$,即1作为结果集一个元素</p><p>同样的$ba$可以看到2也是作为结果集一个元素</p><p>所以$firstpos(n_{1})=\lbrace 1,2,3\rbrace$</p><p><strong>lastpos</strong>(n): 返回的也是一个集合,和firstpos对应,返回的是所有串的结束符号集合</p><p>依然以$n_{1}$为例,参考<code>nullable</code>,<code>firstpos</code>中的分析可以看出所有串都会以$a$结束,所以$lastpos=\lbrace a\rbrace$</p><p>到这里就可以对每个节点进行<code>firstpos</code>和<code>lastpos</code>判断,把结果写在节点前(firstpos)后(lastpos)方便后面的运算</p><p><img src="/2018/04/21/从正则直接到DFA/前后标记.png" alt="带标记的抽象语法树"></p><p><strong>followpos</strong>(n): 这个函数是最重要的, </p><p>定义emmm感觉有点绕,</p><p><img src="/2018/04/21/从正则直接到DFA/followpos.png" alt="定义"></p><p>构造算法:</p><p><img src="/2018/04/21/从正则直接到DFA/构造算法.png" alt="构造算法"></p><p>结合这两条算法跟上面生成的图就可以对应写出followpos的结果表了</p><p>其实简单的来说$followpos(n)$就是在正则表示语言的所有串中找到n后面可以接的字符</p><p>比如对1 $a$来说,$followpos(1)$,可以在firstpos的分析中看到,</p><p>1a后面可以接1a,比如aaa开头的串(firstpos中的串集不是正则语言的串集合,没有带上bb结尾,但是开始部分是一样的),所以$followpos(1)$中含有1</p><p>1a后面可以接2b, 比如上面的aba, 所以结果集中含有2</p><p>1a后面还可以接3a,比如aa就是1a3a这样的 所以结果集中含有3</p><p>在其他的就不可能了,4,5,6是不可能的了,都是在后面拼接的字符,不可能直接相邻</p><p>结果表如下</p><p><img src="/2018/04/21/从正则直接到DFA/follow表.png" alt="定义"></p><p>可以画出followpos的有向图</p><p><img src="/2018/04/21/从正则直接到DFA/有向图.png" alt="定义"></p><h4 id="生成DFA"><a href="#生成DFA" class="headerlink" title="生成DFA"></a>生成DFA</h4><p>从生成的<code>followpos</code>结果表第一个开始,$A=\lbrace1,2,3\rbrace$,分别找a和b,可以划分为$a=&gt;\lbrace1,3\rbrace, b=&gt;\lbrace 2\rbrace$所以接一个a的转化是<br>$$<br>B = Drant[A,a] = followpos(1)\cup followpos(3)=\lbrace1,2,3\rbrace\cup\lbrace4\rbrace=\lbrace1,2,3,4\rbrace<br>$$<br>这个过成就跟用子集构造法从NFA到DFA类似,每个当前状态找寻下一个接a和接b的新状态,注意的就是新状态的生成过程也是不断用<code>followpos</code>计算的即可</p><p>注意,所有包含#的状态是DFA中的接受状态,这里也就是含有id为6的状态就是接受状态</p><p>生成的DFA</p><p><img src="/2018/04/21/从正则直接到DFA/DFA生成图.png" alt="定义"></p><h4 id="最小化DFA"><a href="#最小化DFA" class="headerlink" title="最小化DFA"></a>最小化DFA</h4><p>最小化算法跟前面一片一致,不再多说,有机会再单独整理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大致三个步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成抽象语法树&lt;/li&gt;
&lt;li&gt;计算&lt;code&gt;followpos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生成DFA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原理: 重要状态&lt;/p&gt;
&lt;h3 id=&quot;以-a-b-abb-为例&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译原理" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="DFA" scheme="http://yoursite.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>从正则到NFA到DFA[龙书]</title>
    <link href="http://yoursite.com/2018/04/21/%E4%BB%8E%E6%AD%A3%E5%88%99%E5%88%B0NFA%E5%88%B0DFA-%E9%BE%99%E4%B9%A6/"/>
    <id>http://yoursite.com/2018/04/21/从正则到NFA到DFA-龙书/</id>
    <published>2018-04-21T12:55:36.000Z</published>
    <updated>2018-04-22T12:59:07.097Z</updated>
    
    <content type="html"><![CDATA[<p>获取DFA基础步骤就三步:</p><ol><li>从正则到NFA</li><li>从NFA用子集构造法到DFA</li><li>对DFA进行最小化</li></ol><h3 id="以-a-b-abb-为例"><a href="#以-a-b-abb-为例" class="headerlink" title="以$(a|b)^{*}abb$为例"></a>以$(a|b)^{*}abb$为例</h3><h4 id="从正则到NFA"><a href="#从正则到NFA" class="headerlink" title="从正则到NFA"></a>从正则到NFA</h4><p>记住几个基础转化：</p><ol><li><p>识别$\epsilon$</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/epsilon.png" alt="DFA状态图"></p></li><li><p>识别$a$</p></li></ol><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/a.png" alt="DFA状态图"></p><ol><li>识别$s|t$</li></ol><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/a|b.png" alt="DFA状态图"></p><ol><li>识别$st$</li></ol><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/st.png" alt="DFA状态图"></p><ol><li>识别$s*$</li></ol><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/s*.png" alt="DFA状态图"></p><p>把正则表达式转化成语法树后对应转化成NFA即可</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/语法树.png" alt="DFA状态图"></p><p>(emmm…我觉得这步简单的正则就可以省略了,不复杂直接就能看出来)</p><p>然后对树自底向上转化</p><p>最底层的a, b对应</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/a_NFA.png" alt="DFA状态图"><img src="/2018/04/21/从正则到NFA到DFA-龙书/bNFA.png" alt="DFA状态图"></p><p>接着到了$a|b$</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/a|bNFA.png" alt="DFA状态图"></p><p>然后到了$(a|b)^{*}$</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/(a|b" alt="DFA状态图">*.png)</p><p>然后再接一个a到$(a|b)^{*}a$</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/半成品.png" alt="DFA状态图"></p><p>再接着向上…</p><p>最终结果是</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/result.png" alt="DFA状态图"></p><p>用这种转化生成的NFA与前一篇对比来看</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/前一篇.png" alt="DFA状态图"></p><p>区别主要在$\epsilon$上,接下来转化成DFA就会发现两者DFA结果并无差异</p><p>按照这种算法生成的NFA具有如下<strong>性质</strong>:</p><ol><li><p>N(r)的状态数最多是r中符号和算符总数的两倍</p><p>这里总共10中状态, 语法树中符号是$|,*,\&amp;$算符$a,b$共5个</p></li><li><p>N(r)只有一个接受状态且接受状态没有向外的转换</p></li><li><p>N(r)每个状态有一个用$\sum$的符号标记的指向其他节点的转换,或者最多两个指向其他节点的$\epsilon$转换</p></li></ol><h4 id="从NFA到DFA"><a href="#从NFA到DFA" class="headerlink" title="从NFA到DFA"></a>从NFA到DFA</h4><p>操作依然是使用子集构造法,跟前一篇文章方法一致</p><p>最终的DFA状态表</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/DFA.png" alt="DFA状态图"></p><p>画出转换图</p><p><img src="/2018/04/21/从正则到NFA到DFA-龙书/DFA图.png" alt="DFA状态图"></p><h4 id="最小化DFA"><a href="#最小化DFA" class="headerlink" title="最小化DFA"></a>最小化DFA</h4><p>方法也与前一篇一样,不再赘述</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取DFA基础步骤就三步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从正则到NFA&lt;/li&gt;
&lt;li&gt;从NFA用子集构造法到DFA&lt;/li&gt;
&lt;li&gt;对DFA进行最小化&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;以-a-b-abb-为例&quot;&gt;&lt;a href=&quot;#以-a-b-abb-为例&quot; cl
      
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译原理" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="NFA" scheme="http://yoursite.com/tags/NFA/"/>
    
      <category term="DFA" scheme="http://yoursite.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>从正则到NFA到DFA到最小化</title>
    <link href="http://yoursite.com/2018/04/19/%E4%BB%8E%E6%AD%A3%E5%88%99%E5%88%B0NFA%E5%88%B0DFA%E5%88%B0%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
    <id>http://yoursite.com/2018/04/19/从正则到NFA到DFA到最小化/</id>
    <published>2018-04-19T12:52:58.000Z</published>
    <updated>2018-04-26T03:02:04.652Z</updated>
    
    <content type="html"><![CDATA[<p>获取DFA基础步骤就三步:</p><ol><li>从正则到NFA</li><li>从NFA用子集构造法到DFA</li><li>对DFA进行最小化</li></ol><h3 id="构造正则表达式-ab-a-b-ba-等价的DFA"><a href="#构造正则表达式-ab-a-b-ba-等价的DFA" class="headerlink" title="构造正则表达式$(ab)^{*}(a^{*}|b^{*})(ba)^{*}$等价的DFA"></a>构造正则表达式$(ab)^{*}(a^{*}|b^{*})(ba)^{*}$等价的DFA</h3><h4 id="从正则到NFA"><a href="#从正则到NFA" class="headerlink" title="从正则到NFA"></a>从正则到NFA</h4><p>首先记住几个基本的转化:</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/正则到NFA.png" alt="正则到NFA"></p><p>在正则表达式中只要反复使用这几个基础的转换就能获得NFA了</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/例题1.png" alt="NFA"></p><h4 id="从NFA到DFA-子集构造法"><a href="#从NFA到DFA-子集构造法" class="headerlink" title="从NFA到DFA: 子集构造法"></a>从NFA到DFA: 子集构造法</h4><p>子集是对NFA中所有状态的子集,首先初始的一个状态子集是从开始通过任意个$\epsilon$可到达的状态集合,这里也就是$\lbrace0,1,3,4,5,6,7,9\rbrace$都是只用若干$\epsilon$就可获得的状态</p><p>接着分析每个状态的下一步, 这里只有$a,b$两个字符,对第一个子集中状态在拼接一个$a$后能到达的集合作为下一个子集,也就是$s_{0}=\lbrace2,4,6,7,9\rbrace$,注意是要包含接上一个$a$可到达的状态以及之后可以通过任意个$\epsilon$可到达的状态,详细来看$s_{1}=\lbrace\rbrace$,</p><p>0不可接a,</p><p>1可接a到达2,2后面无$\epsilon$可到状态=&gt;$s_{1}=$$\lbrace2\rbrace$</p><p>3不可接a,</p><p>4可接a到达4,4后可接$\epsilon$到6,7,9=&gt;$s_{1}=\lbrace2,4,6,7,9\rbrace$</p><p>6不可接a</p><p>7不可接a</p><p>9不可接a</p><p>结束=&gt;$s_{1}=\lbrace2,4,6,7,9\rbrace$</p><p>对b的分析也是如此,这样就获得了另一个不同的子集$s_{2}$</p><p>接着对$s_{1},s_{2}$同样分析下去,这题总共有7个不同的状态集合</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/NFA到DFA.jpg" alt="DFA子集表"></p><p>状态表写完后,对状态子集进行标号,用$ABCD…$或者数字序号均可,就可以获得DFA的状态表了</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/DFA.jpg" alt="DFA状态表"></p><p>根据表的指向可画出DFA转化图</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/DFA_2.jpg" alt="DFA状态图"></p><p>注意:</p><p>图中的接受状态,所有包含NFA接受状态的子集都是DFA的接受状态,这里也就是所有包含状态9的子集都是接收状态</p><h4 id="最小化"><a href="#最小化" class="headerlink" title="最小化"></a>最小化</h4><p>寻找最小化的过程也就是去掉多余状态和死态</p><p>多余状态就是从这个状态无法到达接收状态</p><p>死态就是从开始无法到达的状态</p><p>这个例子中就不必最小化了,看下面的例子</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/最小化.png" alt="最小化例题"></p><p>首先将所有的状态进行分类,第一步按照接收状态和非接受状态,分为接受状态的$s_{1}={C,D,E,F}$和非接收状态的$s_{2}=\lbrace S,A,B\rbrace$</p><p>接着对$s_{1},s_{2}$继续分类,</p><p>具体操作就是,先看$s_{1}$,其中$C,D,E,F$通过a,b之后的状态都还是在$s_{1}$中,则$CDEF$是一类,可以合并</p><p>再看$s_{2}​$,下一步接a时,$S,B​$到达A属于$s_{2}​$,A到达$C​$属于$s_{1}​$所以$s_{1}​$可以划分为$\lbrace S,B\rbrace​$和$\lbrace A\rbrace​$,再看$\lbrace S,B\rbrace​$,下一步接b时,S到B属于$s_{2}​$,B接b到D属于$s_{1}​$也就是S,B不属于一类,这样A,S,B不可合并</p><p>则最终结果是</p><p><img src="/2018/04/19/从正则到NFA到DFA到最小化/DFA最小化.jpg" alt="最小化DFA"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取DFA基础步骤就三步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从正则到NFA&lt;/li&gt;
&lt;li&gt;从NFA用子集构造法到DFA&lt;/li&gt;
&lt;li&gt;对DFA进行最小化&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;构造正则表达式-ab-a-b-ba-等价的DFA&quot;&gt;&lt;a href=&quot;#构造正则
      
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译原理" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="NFA" scheme="http://yoursite.com/tags/NFA/"/>
    
      <category term="DFA" scheme="http://yoursite.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯</title>
    <link href="http://yoursite.com/2018/04/16/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    <id>http://yoursite.com/2018/04/16/朴素贝叶斯/</id>
    <published>2018-04-16T08:28:13.000Z</published>
    <updated>2018-04-16T11:20:00.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朴素贝叶斯的理论基础"><a href="#朴素贝叶斯的理论基础" class="headerlink" title="朴素贝叶斯的理论基础"></a>朴素贝叶斯的理论基础</h2><h3 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h3><p> 首先看一下概统中的条件概率,在B条件下事件A发生的概率<br>$$<br>P(A|B)=\frac{P(AB)}{P(B)}<br>$$<br>贝叶斯定理便是基于条件概率,通过$P(A|B)$求得$P(B|A)$<br>$$<br>P(B|A) =\frac{P(A|B)P(B)}{P(A)}<br>$$<br>在给定数据集$(X,Y)$中,每个样本$x$有$n$个特征$(x_{1}, x_{2}, x_{3},\cdots,x_{n})$,</p><p>标记中有$k$个类别$y=(y_{1}, y_{2},\cdots,y_{n})$.</p><p>这时给定新样本$x$,如何判断其所属的类别便是给定$x$条件下$max(P(y_{1}|x),P(y_{2}|x),cdots,P(y_{k}|x))$,</p><p>我们取概率最大的为结果标记.这时$P(y_{k}|x)$就是用贝叶斯公式:<br>$$<br>P(y_{k}|x)=\frac{P(x|y_{k})P(y_{k})}{P(x)}<br>$$<br>对公式进行一些变形和运算:</p><p>分子中的$P(y_{k})$根据数据集直接求出</p><p>$P(x|y_{k})=P(x_{1},x_{2},\cdots,x_{n}|y_{k})$,假设第$i$维的特征$x_{i}$可取的值有$S_{i}$个,类别取值个数为$k$个,那么参数个数也就是$K\prod_{i=1}^{n}S_{i}$个,这是指数级的个数,显然不行.</p><p>在这里,朴素贝叶斯算法对条件概率分布做出了独立性假设,简单的说也就是假设各个维度的特征$x_{1}, x_{2},\cdots,x_{n}$是相互独立的,此时条件概率转化为<br>$$<br>P(x|y_{k})=P(x_{1},x_{2},\cdots,x_{n}|y_{k})=\prod_{i=1}^{n}P(x_{i}|y_{k})<br>$$<br>分母部分</p><p>首先运用全概率公式:<br>$$<br>P(A) = \sum_{i=1}^{n}P(B_{i})P(A|B_{i})<br>$$<br>得到<br>$$<br>P(x)=\sum_{k}\space P(y_{k})P(x|y_{k})<br>$$<br>再运用上面的独立性假设<br>$$<br>P(x) = \sum_{k}\space P(y_{k})P(x|y_{k})=\sum_{k}P(y_{k})\prod_{i=1}^{n}P(x_{i}|y_{k})<br>$$<br>则<br>$$<br>P(y_{k}|x)=\frac{P(y_{k})\prod_{i=1}^{n}P(x_{i}|y_{k})}{\sum_{k}P(y_{k}\prod_{i=1}^{n}P(x_{i}|y_{k})}<br>$$<br>于是朴素贝叶斯分类器可表示为<br>$$<br>f(x)=argmax_{y_{k}}P(y_{k}|x)=argmax_{y_{k}}\frac{P(y_{k})\prod_{i=1}^{n}P(x_{i}|y_{k})}{\sum_{k}P(y_{k}\prod_{i=1}^{n}P(x_{i}|y_{k})}<br>$$<br>又对于所有的$y_{k}$,式中的分母都一样,则忽略分母部分,最终可表示为:<br>$$<br>f(x)=argmax_{y_{k}}P(y_{k}|x)=argmax_{y_{k}}P(y_{k})\prod_{i=1}^{n}P(x_{i}|y_{k})<br>$$<br>下面将介绍几个基本模型用来计算朴素贝叶斯</p><h2 id="几种常见模型的实现"><a href="#几种常见模型的实现" class="headerlink" title="几种常见模型的实现"></a>几种常见模型的实现</h2><h3 id="多项式模型"><a href="#多项式模型" class="headerlink" title="多项式模型"></a>多项式模型</h3><p>当特征是离散值时,使用多项式模型.</p><p>多项式模型在计算先验概率$P(y_{k})$和条件概率$P(x_{i}|y_{k})$时会做一些平滑处理,具体为:<br>$$<br>P(y_{k})=\frac{N_{y_{k}}+\alpha}{N+k\alpha}<br>$$</p><p>$$<br>P(x_{i}|y_{k})=\frac{N_{y_{k}x_{i}}+\alpha}{N_{y_{k}}+n\alpha}<br>$$</p><p>其中,</p><p>$N$是数据集的总样本数</p><p>$N_{y_{k}}$是标签为$y_{k}$的样本数,$N_{y_{k}x_{i}}$是标签为$y_{k}$中特征为$X_{i}$的样本数</p><p>$k$的标签总数, $n$是特征维度</p><p>$\alpha$是平滑系数</p><p>当$\alpha=1$时称为$Laplace$平滑,当$0&lt;\alpha&lt;1$时称$Lidstone$平滑,$\alpha=0$时不平滑</p><p>平滑处理可以避免遇到训练数据中没出现过的$x_{i}$时,$P(x_{i}|y_{k})=0$从而导致后验概率也为0.</p><h3 id="高斯模型"><a href="#高斯模型" class="headerlink" title="高斯模型"></a>高斯模型</h3><p>当特征值是连续变量时,多项式模型会当做离散值处理从而导致很多$P(x_{i}|y_{k})=0$出现(未平滑),及时进行了平滑处理,效果也不理想,这时可以采用高斯模型</p><p>高斯模型假设其中的每一维特征值都符合正太分布</p><p>比如体测信息中的身高数据,不能当做离散值计算时,我们可以宏观的看身高符合正太分布,则可以计算出身高数据的期望和方差,从而就知道了某一身高值的概率</p><p>高斯分布的概率密度函数:<br>$$<br>f(x)=\frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{(x-\mu)^{2}}{2 \sigma^{2}}}<br>$$<br>高斯模型的计算:<br>$$<br>P(x_{i}|y_{k})=\frac{1}{\sigma_{y_{k},i}\sqrt{2\pi}}e^{-\frac{(x-\mu_{y_{k},i})^{2}}{2 \sigma_{y_{k},i}^{2}}}<br>$$<br>其中</p><p>$\mu_{y_{k},i}$表示标签$y_{k}$中的第$i$维特征值的期望</p><p>$\sigma_{y_{k},i}$是标签为$y_{k}$中的第$i$维特征值的标准差</p><p>也就是运用正态分布的概率密度函数,对每一组条件概率下都进行计算.</p><p>代码和对应的例子之后补更.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;朴素贝叶斯的理论基础&quot;&gt;&lt;a href=&quot;#朴素贝叶斯的理论基础&quot; class=&quot;headerlink&quot; title=&quot;朴素贝叶斯的理论基础&quot;&gt;&lt;/a&gt;朴素贝叶斯的理论基础&lt;/h2&gt;&lt;h3 id=&quot;贝叶斯定理&quot;&gt;&lt;a href=&quot;#贝叶斯定理&quot; class=&quot;he
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="朴素贝叶斯" scheme="http://yoursite.com/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
      <category term="统计学习方法" scheme="http://yoursite.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
